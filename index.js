URLS=[
"gpdk/index.html",
"gpdk/all.html",
"gpdk/benchmark/index.html",
"gpdk/benchmark/test_performance.html",
"gpdk/components/index.html",
"gpdk/components/all.html",
"gpdk/components/bend/index.html",
"gpdk/components/bend/bend_bezier.html",
"gpdk/components/bend/bend_circular.html",
"gpdk/components/bend/bend_euler.html",
"gpdk/components/bend/test/index.html",
"gpdk/components/bend/test/test_bend_bezier.html",
"gpdk/components/bend/test/test_bend_circular.html",
"gpdk/components/bend/test/test_bend_euler.html",
"gpdk/components/bondpad/index.html",
"gpdk/components/bondpad/bondpad.html",
"gpdk/components/bondpad/bondpad_tapered.html",
"gpdk/components/bondpad/test/index.html",
"gpdk/components/bondpad/test/test_bondpad.html",
"gpdk/components/bondpad/test/test_bondpad_tapered.html",
"gpdk/components/combiner/index.html",
"gpdk/components/combiner/test/index.html",
"gpdk/components/combiner/test/test_y_combiner.html",
"gpdk/components/combiner/y_combiner.html",
"gpdk/components/contact_hole/index.html",
"gpdk/components/contact_hole/contact_hole.html",
"gpdk/components/contact_hole/test/index.html",
"gpdk/components/contact_hole/test/test_contact_hole.html",
"gpdk/components/directional_coupler/index.html",
"gpdk/components/directional_coupler/directional_coupler_bend.html",
"gpdk/components/directional_coupler/directional_coupler_half_ring.html",
"gpdk/components/directional_coupler/directional_coupler_sbend.html",
"gpdk/components/directional_coupler/test/index.html",
"gpdk/components/directional_coupler/test/test_directional_coupler_bend.html",
"gpdk/components/directional_coupler/test/test_directional_coupler_half_ring.html",
"gpdk/components/directional_coupler/test/test_directional_coupler_sbend.html",
"gpdk/components/fixed_edge_coupler/index.html",
"gpdk/components/fixed_edge_coupler/fixed_edge_coupler.html",
"gpdk/components/fixed_edge_coupler/test/index.html",
"gpdk/components/fixed_edge_coupler/test/test_fixed_edge_coupler.html",
"gpdk/components/fixed_mh_te_1550/index.html",
"gpdk/components/fixed_mh_te_1550/fixed_mh_te_1550.html",
"gpdk/util/json_cell.html",
"gpdk/components/fixed_mh_te_1550/test/index.html",
"gpdk/components/fixed_mh_te_1550/test/test_fixed_mh_te_1550.html",
"gpdk/components/fixed_photo_detector/index.html",
"gpdk/components/fixed_photo_detector/fixed_photo_detector.html",
"gpdk/components/fixed_photo_detector/test/index.html",
"gpdk/components/fixed_photo_detector/test/test_fixed_photo_detector.html",
"gpdk/components/fixed_terminator_te_1550/index.html",
"gpdk/components/fixed_terminator_te_1550/fixed_terminator_te_1550.html",
"gpdk/components/fixed_terminator_te_1550/test/index.html",
"gpdk/components/fixed_terminator_te_1550/test/test_fixed_terminator_te_1550.html",
"gpdk/components/func_all.html",
"gpdk/components/grating_coupler/index.html",
"gpdk/components/grating_coupler/grating_coupler.html",
"gpdk/components/grating_coupler/test/index.html",
"gpdk/components/grating_coupler/test/test_grating_coupler.html",
"gpdk/components/heater/index.html",
"gpdk/components/heater/si_heater.html",
"gpdk/components/heater/test/index.html",
"gpdk/components/heater/test/test_si_heater.html",
"gpdk/components/heater/test/test_tin_heater.html",
"gpdk/components/heater/tin_heater.html",
"gpdk/components/mmi/index.html",
"gpdk/components/mmi/mmi.html",
"gpdk/components/mmi/test/index.html",
"gpdk/components/mmi/test/test_mmi.html",
"gpdk/components/my_pcell/index.html",
"gpdk/components/my_pcell/my_pcell.html",
"gpdk/components/my_pcell/test/index.html",
"gpdk/components/mzm/index.html",
"gpdk/components/mzm/mzm.html",
"gpdk/components/mzm/test/index.html",
"gpdk/components/mzm/test/test_mzm.html",
"gpdk/components/mzm/test/test_TW_mzm.html",
"gpdk/components/mzm/TW_mzm.html",
"gpdk/components/m_taper/index.html",
"gpdk/components/m_taper/m_taper.html",
"gpdk/components/m_taper/test/index.html",
"gpdk/components/m_taper/test/test_m_taper.html",
"gpdk/components/pn_phase_shifter/index.html",
"gpdk/components/pn_phase_shifter/pn_phase_shifter.html",
"gpdk/components/pn_phase_shifter/pn_phase_shifter_sample.html",
"gpdk/components/pn_phase_shifter/test/index.html",
"gpdk/components/pn_phase_shifter/test/test_pn_phase_shifter.html",
"gpdk/components/ring_filter/index.html",
"gpdk/components/ring_filter/ring_filter.html",
"gpdk/components/ring_filter/test/index.html",
"gpdk/components/ring_filter/test/test_ring_filter.html",
"gpdk/components/ring_modulator/index.html",
"gpdk/components/ring_modulator/ring_modulator.html",
"gpdk/components/ring_modulator/test/index.html",
"gpdk/components/ring_modulator/test/test_ring_modulator.html",
"gpdk/components/ring_resonator/index.html",
"gpdk/components/ring_resonator/ring_resonator.html",
"gpdk/components/ring_resonator/ring_resonator_single_bus.html",
"gpdk/components/ring_resonator/test/index.html",
"gpdk/components/ring_resonator/test/test_ring_resonator.html",
"gpdk/components/ring_resonator/test/test_ring_resonator_single_bus.html",
"gpdk/components/sbend/index.html",
"gpdk/components/sbend/sbend.html",
"gpdk/components/sbend/sbend_circular.html",
"gpdk/components/sbend/sbend_cosine.html",
"gpdk/components/sbend/test/index.html",
"gpdk/components/sbend/test/test_sbend.html",
"gpdk/components/sbend/test/test_sbend_circular.html",
"gpdk/components/sbend/test/test_sbend_cosine.html",
"gpdk/components/spiral/index.html",
"gpdk/components/spiral/spiral.html",
"gpdk/components/spiral/spiral2.html",
"gpdk/components/spiral/test/index.html",
"gpdk/components/spiral/test/test_spiral.html",
"gpdk/components/splitter/index.html",
"gpdk/components/splitter/test/index.html",
"gpdk/components/splitter/test/test_y_splitter.html",
"gpdk/components/splitter/y_splitter.html",
"gpdk/components/straight/index.html",
"gpdk/components/straight/straight.html",
"gpdk/components/straight/test/index.html",
"gpdk/components/straight/test/test_straight.html",
"gpdk/components/taper/index.html",
"gpdk/components/taper/taper_linear.html",
"gpdk/components/taper/taper_parabolic.html",
"gpdk/components/taper/test/index.html",
"gpdk/components/taper/test/test_taper_linear.html",
"gpdk/components/taper/test/test_taper_parabolic.html",
"gpdk/components/transition/index.html",
"gpdk/components/transition/fwg2mwg_transition.html",
"gpdk/components/transition/fwg2swg_transition.html",
"gpdk/components/transition/swg2mwg_transition.html",
"gpdk/components/transition/test/index.html",
"gpdk/components/transition/test/test_fwg2mwg_transition.html",
"gpdk/components/transition/test/test_fwg2swg_transition.html",
"gpdk/components/transition/test/test_swg2mwg_transition.html",
"gpdk/components/via/index.html",
"gpdk/components/via/test/index.html",
"gpdk/components/via/test/test_via.html",
"gpdk/components/via/via.html",
"gpdk/components/via/vias.html",
"gpdk/examples/index.html",
"gpdk/examples/example_array_mzi.html",
"gpdk/examples/example_connected.html",
"gpdk/examples/example_connected_and_linked.html",
"gpdk/examples/example_cosine_bend.html",
"gpdk/examples/example_curve_length.html",
"gpdk/examples/example_demultiplexer.html",
"gpdk/examples/example_demultiplexer2.html",
"gpdk/examples/example_elliptical_rings.html",
"gpdk/examples/example_export_gds_layer_mapper.html",
"gpdk/examples/example_extension_profile.html",
"gpdk/examples/example_flatten.html",
"gpdk/examples/example_fonts.html",
"gpdk/examples/example_hidden_port.html",
"gpdk/examples/example_hierarchical.html",
"gpdk/examples/example_linked.html",
"gpdk/examples/example_linked_elec.html",
"gpdk/examples/example_linked_elec2.html",
"gpdk/examples/example_linked_elec_layers.html",
"gpdk/examples/example_linked_manual.html",
"gpdk/examples/example_linked_splitter.html",
"gpdk/examples/example_linker.html",
"gpdk/examples/example_link_between_flyline.html",
"gpdk/examples/example_link_smooth.html",
"gpdk/examples/example_merged.html",
"gpdk/examples/example_mzi_perf.html",
"gpdk/examples/example_pcell_dataclass.html",
"gpdk/examples/example_pcell_dataclass_oversimplified.html",
"gpdk/examples/example_pcell_dataclass_with_final.html",
"gpdk/examples/example_phase_shifter.html",
"gpdk/examples/example_port_transform.html",
"gpdk/examples/example_q_mod_tx.html",
"gpdk/examples/example_ringMod_transceiver.html",
"gpdk/examples/example_sampler_periodic.html",
"gpdk/examples/example_scancodes.html",
"gpdk/examples/example_sdl_circuit_01.html",
"gpdk/examples/example_sdl_circuit_02.html",
"gpdk/examples/example_sdl_circuit_03.html",
"gpdk/examples/example_sdl_circuit_04.html",
"gpdk/examples/example_sdl_circuit_05.html",
"gpdk/examples/example_slot_waveguide.html",
"gpdk/examples/example_svrf.html",
"gpdk/examples/example_swgr_waveguide.html",
"gpdk/examples/example_transform.html",
"gpdk/examples/example_waveguide_offset.html",
"gpdk/geometry/index.html",
"gpdk/geometry/sampler_periodic.html",
"gpdk/lyp.html",
"gpdk/routing/index.html",
"gpdk/routing/all.html",
"gpdk/routing/auto_transitioned/index.html",
"gpdk/routing/auto_transitioned/auto_transitioned.html",
"gpdk/routing/auto_transitioned/test/index.html",
"gpdk/routing/auto_transitioned/test/test_auto_transitioned.html",
"gpdk/routing/comp_scan/index.html",
"gpdk/routing/comp_scan/comp_scan.html",
"gpdk/routing/comp_scan/test/index.html",
"gpdk/routing/comp_scan/test/test_comp_scan.html",
"gpdk/routing/extended/index.html",
"gpdk/routing/extended/extended.html",
"gpdk/routing/extended/test/index.html",
"gpdk/routing/extended/test/test_extended.html",
"gpdk/routing/fanout/index.html",
"gpdk/routing/fanout/h_fanout.html",
"gpdk/routing/fanout/test/index.html",
"gpdk/routing/fanout/test/test_h_fanout.html",
"gpdk/routing/horizontalized/index.html",
"gpdk/routing/horizontalized/horizontalized.html",
"gpdk/routing/horizontalized/test/index.html",
"gpdk/routing/horizontalized/test/test_horizontalized.html",
"gpdk/run_examples.html",
"gpdk/svrf_template.html",
"gpdk/technology/index.html",
"gpdk/technology/auto_link.html",
"gpdk/technology/auto_transition.html",
"gpdk/technology/auto_vias.html",
"gpdk/technology/bands.html",
"gpdk/technology/device.html",
"gpdk/technology/display.html",
"gpdk/technology/drc/index.html",
"gpdk/technology/fitting_function.html",
"gpdk/technology/font/index.html",
"gpdk/technology/font/font_bombardier.html",
"gpdk/technology/font/font_college_tm.html",
"gpdk/technology/font/font_fff_forward.html",
"gpdk/technology/font/font_fragile_bombers.html",
"gpdk/technology/font/font_graduate.html",
"gpdk/technology/font/font_karisma.html",
"gpdk/technology/font/font_karnivore.html",
"gpdk/technology/font/font_keania_one.html",
"gpdk/technology/font/font_line_pixel_7.html",
"gpdk/technology/font/font_minercraftory.html",
"gpdk/technology/font/font_pop_warner.html",
"gpdk/technology/font/font_press_start_2p.html",
"gpdk/technology/font/font_staubach.html",
"gpdk/technology/font/font_std_vented.html",
"gpdk/technology/font/font_traceroute.html",
"gpdk/technology/font/font_your_complex_brk.html",
"gpdk/technology/font/font_zcool_qingke_huangyou.html",
"gpdk/technology/gdsii.html",
"gpdk/technology/interfaces/index.html",
"gpdk/technology/interfaces/metal.html",
"gpdk/technology/interfaces/wg.html",
"gpdk/technology/label.html",
"gpdk/technology/layers.html",
"gpdk/technology/linker.html",
"gpdk/technology/link_between.html",
"gpdk/technology/metal.html",
"gpdk/technology/metrics.html",
"gpdk/technology/tech.html",
"gpdk/technology/terminal.html",
"gpdk/technology/vias.html",
"gpdk/technology/waveguide_factory.html",
"gpdk/technology/wg.html",
"gpdk/test_all.html",
"gpdk/util/index.html",
"gpdk/util/all.html",
"gpdk/util/check_requirements.html",
"gpdk/util/combine_builds.html",
"gpdk/util/curvature_util.html",
"gpdk/util/gds_cell.html",
"gpdk/util/link_util.html",
"gpdk/util/pdk_spec/index.html",
"gpdk/util/pdk_spec/check_all.html",
"gpdk/util/pdk_spec/check_list.html",
"gpdk/util/pdk_spec/components/index.html",
"gpdk/util/pdk_spec/components/component_all_check.html",
"gpdk/util/pdk_spec/components/component_func_all_check.html",
"gpdk/util/pdk_spec/components/file_exist_check.html",
"gpdk/util/pdk_spec/interfaces.html",
"gpdk/util/pdk_spec/rule.html",
"gpdk/util/pdk_spec/settings.html",
"gpdk/util/pdk_spec/technology/index.html",
"gpdk/util/pdk_spec/technology/auto_link.html",
"gpdk/util/pdk_spec/technology/auto_transition.html",
"gpdk/util/pdk_spec/technology/auto_vias.html",
"gpdk/util/pdk_spec/technology/bands.html",
"gpdk/util/pdk_spec/technology/display.html",
"gpdk/util/pdk_spec/technology/layers.html",
"gpdk/util/pdk_spec/technology/linker.html",
"gpdk/util/pdk_spec/technology/tech.html",
"gpdk/util/port_util.html",
"gpdk/util/spc_util.html",
"gpdk/util/test_util.html",
"gpdk/util/transformable_point.html"
];
INDEX=[
{
"ref":"gpdk",
"url":0,
"doc":" Generic PDK Open source Generic PDK  Changelog   Version 1.2.16rc4 (2022-9-2)               - CompScan minor update - minor bugfixes Version 1.2.15 (2022-8-17)               - CompScan minor update Version 1.2.14 (2022-7-11)               - vias for MT and M1 Version 1.2.13 (2022-7-11)               - minior updates Version 1.2.12 (2022-7-11)               - Components: Mmi1x2, BondPad75, BondPad100 Version 1.2.11 (2022-7-6)               - TW_mzm layer updates Version 1.2.10 (2022-7-5)               - Pins(electrical port) now have default orientations now Version 1.2.9 (2022-6-24)               - util.pdk_spec.check_all function to check if user's custom pdk supports SDL - examples/example_mzi_perf.py as a performance test demo - linker.py/TECH.LINKER, link_between/LINK_BETWEEN is deprecated and will be removed in a future version Version 1.2.8.post3 (2022-4-13)               - make  link_type and  bend_factory frozen parameters in LINK_BETWEEN Version 1.2.8.post2 (2022-4-13)               - remove band annotations from gpdk/technology/link_between.py Version 1.2.8.post1 (2022-3-24)               - example_array_mzi.py Version 1.2.7 (2022-3-22)               - AUTO_TRANISITON and AUTO_VIAS updates Version 1.2.6.post1 (2022-3-10)               - linking_policy updates Version 1.2.6 (2022-3-7)               - Custom LinkBetween in technology, see gpdk/technology/link_between.py Version 1.2.5.post2 (2022-2-25)               - components: spiral ports fix Version 1.2.5.post1 (2022-2-24)               - minor updates Version 1.2.4 (2022-2-16)               - example_sdl_circuit_01.py update Version 1.2.3 (2022-2-7)               - updates to align fnpcell's update - examples: example_linked_elec_layers.py Version 1.2.2.post3 (2022-1-14)               - components: all parameters have default values now. So every component can be called without any argument. - examples: example_waveguide_offset.py, example_phase_shifter.py - add some  fp.export_pls output - minor updates Version 1.2.1.post1 (2021-12-30)               - Remove most  flatten calls due to  fp.export_gds(auto_flatten=True) - port/pin names update Version 1.2.0 (2021-12-24)               - technology:  CircularBendFactory and  EulerBendFactory in bend_factory.py, components now use  IBendWaveguideFactory instead of  AUTO_BEND - technology:  auto_link.py defines  LINKING_POLICY for auto link - technology:  display.py use  LayerStyle and  LayerStyleSet now.  Breaking Change - bends implements  IWaveguideLike now - examples:  example_elliptical_rings.py demos rings with different outer initial/final angle and inner initial/final angle - fonts: font_bombardier, font_college_tm, font_fragile_bombers, font_graduate, font_karisma, font_karnivore, font_pop_warner, font_staubach, font_traceroute, font_your_complex_brk - components: pn_phase_shifter_sample.py demos  PeriodicSampler and  with_patches to build complex waveguide-like cell - components: pn_phase_shifter_sample2.py demos  CurvePaint to build complex waveguide-like cell - routing:  CompScan and  CompScanBuilder added  fiber_coupler_factory , and  Title supports  font_size - font:  font_std_vented.py - bugfixes Version 1.1.2 (2021-11-10)               -  name in  Process ,  Purpose and  Layer shows first in  __repr__ now -  core_bias and  cladding_bias moved behind in  __repr__ , now  core_layout_width and  cladding_layout_width shows first -  JsonCell supports full layer and waveguide_type path now. - minor updates and bugfixes Version 1.1.1 (2021-11-10)               - examples: example_merge.py to demo polygon and layer boolean operations. - examples: example_link_between_flyline.py to demo flyline and how to turn  FlylineWarning to an error - util:  JsonCell as a base class to define a pcell by import from json, see components/fixed_mh_te_1550/fixed_mh_te_1550.py and Fixed_MH_TE_1550.json - util:  expect_same_content in test_util.py provide a decorator for testing whether test function returns same result as before(in gds format) - util/gds_util.py removed - technology:  CoreCladdingWaveguideType and  SlotWaveguideType use  __post_init__ to eager calculate layout width now - technology:  SlotWaveguideType has a new  slot_bias parameter Version 1.1.0 (2021-10-29)               - examples: example_pcell_dataclass_oversimplified.py to demo how to define a pcell class in an oversimplified way. Version 1.0.0 (2021-10-27)               - fonts: font_line_pixel_7 has different appearance for  0 and  O now - examples: example_pcell_dataclass_with_final.py demo  final on class / field - examples: example_demultiplexer2.py, example_ringMod_transceiver.py and example_linked_elec2.py are updated to demo  fp.Timing () and  fp.statistics () Version 0.4.9 (2021-10-20)               - More docstring with picture added - More tests Version 0.4.8 (2021-10-13)               -  example_extension_profile.py demo how to add extension profile to an existed metal line - some refactor Version 0.4.7 (2021-10-8)               -  from gpdk.technology import get_technology instead of  from gpdk.technology import TECH - updates for fnpcell changes Version 0.4.6 (2021-9-29)               - some refactoring and fix Version 0.4.5 (2021-9-27)               - bugfixes Version 0.4.4 (2021-9-22)               - components and routings are converted to dataclass form pcell - examples: example_pcell_dataclass.py update to demo subclassing without .dataclass() - bugfixes Version 0.4.3 (2021-9-17)               - WaveguideType, MetalLineType, MetalLineStyle parameters renamed - DESIGN_CORE_WIDTH => core_design_width, FORCE_CORE_WIDTH => core_layout_width, CORE_BIAS => core_bias  . - LINE_WIDTH => line_width, FORCE_LINE_STYLE => line_layout_style,  . - STUB_WIDTH => stub_width - New bool stub_right_angle(default to False) parameter to MetalLineStyle. - examples: example_sampler_periodic.py update Version 0.4.2 (2021-9-15)               - components: Vias as a via array - examples: example_linked_elec2.py updated for metal auto link preview - technology: auto_via.py => auto_vias.py, AUTO_VIA => AUTO_VIAS Version 0.4.1 (2021-9-13)               - extract IMetalLineStyle from IMetalLineType - technology: BundleMetalLineStyle, SlotMetalLineType => SlotMetalLineStyle, StyledMetalLineType - TECH.METAL.DEFAULT_LINE_STYLE = BundleMetalLineStyle() - TECH.AUTO_VIA, TECH.AUTO_METAL_LINE_TYPE - components: CosineBend preview for p parameter - examples: example_linked_elec.py updated for metal auto link preview Version 0.4.0 (2021-9-10)               - move CoreCladdingWaveguideType from fnpcell to gpdk.technology.interfaces - replace CD_BIAS with core_bias and cladding_bias in CoreCladdingWaveguideType - examples: example_pcell_dataclass.py shows how to use _default_xxx to provide default value to parameters, remove defer_default - check_requirements now supports check_requirements(fnpcell=Strict(\"0.4.5rc\"), gpdk=\"0.3.9\") which requires fnpcell  0.4.5rc and gpdk >= 0.3.9 - bugfix: band_annotation raises on empty cell - remove example_with_parameters as dataclass pcell don't need it Version 0.3.9 (2021-9-9)               - examples: example_pcell_dataclass.py shows how to use _default_xxx to provide default value to parameters Version 0.3.8 (2021-9-7)               - gpdk/geometry/sampler_periodic.py - examples: example_sampler_periodic.py Version 0.3.7 (2021-9-5)               - wg.py: SwgWaveguideType, WG.SWGR.C.WIRE - examples: example_swgr_waveguide.py Version 0.3.6 (2021-9-4)               - util: check_requirements hotfix for pycharm, as pycharm run py files in a nonstandard terminal Version 0.3.5 (2021-9-4)               - util: check_requirements print colored messages now Version 0.3.4 (2021-9-3)               - examples: example_pcell_dataclass update to use dataclass with frozen=False - examples: example_hidden_port to demo how to hide a port without rename it to None, nor disable it - util: check_requirements warn if requirements are not met - runtime will display fnpcell and gpdk version on start Version 0.3.3 (2021-8-31)               - Components: Via using dataclass form - examples: example_pcell and example_pcell_dataclass, example_smooth_link Version 0.3.2 (2021-8-28)               - use fp.g.Path.move(to=(x, y instead fp.g.Path() to align fnpcell's updates Version 0.3.1 (2021-8-27)               - technology/wg.py: SlotWaveguideType is added to demo how to build a new IWaveguideType - examples: example_slot_waveguide.py demo new added SlotWaveguideType Version 0.3.0 (2021-8-24)               - examples: example_linked_elec.py demo metal auto-link (incubator) Version 0.2.9 (2021-8-22)               - bugfix Version 0.2.8 (2021-8-21)               - examples update: example_demultiplexer.py using waypoints now - examples update: example_link_between.py demo how to use LinkBetween in links parameter of Linked - fonts: font_press_start_2p Version 0.2.7 (2021-8-20)               - components: BondPadTapered Version 0.2.6 (2021-8-20)               - gpdk.components.all & gpdk.routing.all Version 0.2.5 (2021-8-18)               - examples: example_ringmod_transceiver.py update - reexport Horizontalized and Fixed_Photo_Detector2 in gpdk.all Version 0.2.4 (2021-8-17)               - examples: example_ringmod_transceiver.py Version 0.2.3 (2021-8-17)               - BondPad and MTaper fixed to LAYER.MT_DRW now Version 0.2.2 (2021-8-16)               - wg: TE and TETM support, eg WG.SWG.C.WIRE and WG.SWG.C.WIRE_TETM - auto_bend: add TETM support Version 0.2.1 (2021-8-15)               - Components: BondPad, MTaper, BendCosine, SBendCosine, SBend(replace SBendEuler) - updates: HFanout, CompScan and Horizontalized now supports auto_bend parameter - gpdk.util: links, generate_svrf, combine_builds - drc: svrf_template - font: zcool_qingke_huangyou, keania_one - TECH: LABEL(FONT, FONT_SIZE, BASELINE) Version 0.2.0 (2021-8-9)               - dependencies update Version 0.1.9 (2021-8-2)               - TECH.GDSII Version 0.1.8 (2021-7-27)               - bugfix Version 0.1.7 (2021-7-25)               - bugfix Version 0.1.6 (2021-7-20)               - examples/example_port_transform.py - Routing: \u65b0\u589e AutoTransitioned, Extended Version 0.1.5 (2021-7-2)               - CompScan \u73b0\u5728\u4f7f\u7528SBendEuler\u6765fanout\uff0c\u652f\u6301repeat\u53c2\u6570 - Components: MMI Version 0.1.4 (2021-6-30)               - generate_svrf \u652f\u6301 - examples update - ComScan \u6539\u540d\u4e3a CompScan Version 0.1.3 (2021-6-14)               - Fixed_MH_TE_1550 using fp.import_from_json() - example_flatten.py Version 0.1.2 (2021-6-1)               - from gpdk.technology import get_technology - Components: Combiner, Splitter, fixed_edge_coupler_1550, fixed_photo_detector, fixed_terminator_te_1550, mzm, pn_phase_shifter, ring_modulator - supports for PINREC_FWG, PINREC_SWG, PINREC_MWG, PINREC_TEXT Version 0.1.1 (2021-5-10)               - ComScan, ComScanBuilder \u652f\u6301 Alignment, Title, Blank, Block - example_builder, example_collection Version 0.1.0 (2021-4-26)               - EulerBend \u652f\u6301 l_max \u53c2\u6570 - SBendEuler \u73b0\u5728\u4f7f\u7528 radius_min \u548c l_max \u53c2\u6570\u4e86\uff08\u4e4b\u524d\u7528 radius_eff \u548c p\uff09 - HFanout \u6539\u8fdb\uff1atransition \u653e\u6700\u5916, sbend \u4e24\u7aef\u52a0 straight - Components: \u589e\u52a0 DirectionalCouplerBend, Fixed_Terminator_TE_1550 - Examples: \u589e\u52a0 example_linked \u548c example_demultiplexer \u6f14\u793a AutoLink Version 0.0.9 (2021-4-14)               - BendBezier, BendEuler \u548c SBendEuler\u3002 BendEuler \u652f\u6301 radius_min, radius_eff \u548c p \u53c2\u6570 - Fanout2x2 \u6539\u540d\u4e3a HFanout\uff0c \u652f\u6301\u5de6\u53f3\u4efb\u610f\u591a\u7aef\u53e3\u6570\uff0c\u652f\u6301 auto transition - technology \u8c03\u6574\uff0c\u4e3b\u8981\u662f\u652f\u6301 AutoTransition \u4ee5\u53ca\u652f\u6301 TECH.WG.FWG.C.WIRE \u7684\u5f62\u5f0f\uff0c\u6539\u8fdb\u4e2d Version 0.0.8 (2021-3-31)               - \u6240\u6709\u7684 Components \u90fd\u652f\u6301 ports \u53c2\u6570\u4e86\uff0c ports=[None, \"op_0\"] - Straight, Taper, Transitions \u652f\u6301 anchor \u5bf9\u9f50 Version 0.0.7 (2021-3-18)               Version 0.0.6 (2021-3-17)               - Examples\uff1aexample_pcell.py \u521b\u5efa pcell \u7684\u793a\u4f8b - Components: DCHalfRingStraight, Fixed_MH_TE_1550\uff08\u5bfc\u5165 .gds \u6587\u4ef6\u4e2d\u7684 cell \u5e76\u6dfb\u52a0 port\uff09 - Fanout2x2 \u73b0\u5728\u79fb\u52a8\u5230 routing \u6587\u4ef6\u5939 - test_all.py \u6279\u91cf\u6267\u884c test_XXX.py \u6587\u4ef6\u91cc\u7684 test_xxx \u65b9\u6cd5 - \u4f18\u5316\u6a21\u5757\u5bfc\u5165\uff0c\u73b0\u5728\u53ea\u9700 from gpdk import all as pdk Version 0.0.5 (2021-3-11)               - Components: fanout_2x2, tin_heater - \u7edf\u4e00 port \u547d\u540d\u89c4\u8303\uff1a\u81ea\u5de6\u4e0a\u89d2\uff0c\u9006\u65f6\u9488\uff0c\u4f9d\u6b21 op_0, op_1,  ., op_N Version 0.0.4 (2021-3-10)               - Components: contact_hole, grating_coupler, si_heater, swg2mwg_transition Version 0.0.3 (2021-3-8)               - Process, Purpose, Layer \u5b9a\u4e49\u8c03\u6574 - Components: bend, directional_coupler, ring_filter, ring_resonator, sbend, straight, taper, transition(fwg2swg, fwg2mwg) - \u6240\u6709components\u90fd\u53ef\u4ee5\u76f4\u63a5\u8dd1__main__\u6765\u751f\u6210local\u4e0b\u5bf9\u5e94\u7684gds\uff0c_test\u91cc\uff08\u76ee\u524d\u4ec5\u7528Bend\u5f53\u4f8b\u5b50\uff09\u6709test\u53ef\u4ee5pytest\u8fd0\u884c\uff0c\u8f93\u51fa\u5230_tests\u4e0b - \u53ef\u5bfc\u51fa lyp Version 0.0.2 (2021-2-25)               - Process, Purpose, Layer \u5b8c\u6210\u521d\u59cb\u5b9a\u4e49  "
},
{
"ref":"gpdk.all",
"url":1,
"doc":""
},
{
"ref":"gpdk.benchmark",
"url":2,
"doc":""
},
{
"ref":"gpdk.benchmark.test_performance",
"url":3,
"doc":""
},
{
"ref":"gpdk.benchmark.test_performance.layout",
"url":3,
"doc":"",
"func":1
},
{
"ref":"gpdk.benchmark.test_performance.test_performance",
"url":3,
"doc":"",
"func":1
},
{
"ref":"gpdk.components",
"url":4,
"doc":""
},
{
"ref":"gpdk.components.all",
"url":5,
"doc":""
},
{
"ref":"gpdk.components.bend",
"url":6,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_bezier",
"url":7,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_bezier.BendBezier",
"url":7,
"doc":"Attributes: start: start point of bezier curve controls: control points of bezier, 1 for Quadratic Bezier, 2 for Cubic Bezier,  . end: end point of bezier curve waveguide_type: type of waveguide of the bend port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() bend = BendBezier(name=\"q\", start=(0, 0), controls=[(31, 30)], end=(60, 0), waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(bend)   ![BendBezier](images/bend_bezier_q.png)"
},
{
"ref":"gpdk.components.bend.bend_bezier.BendBezier.start",
"url":7,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_bezier.BendBezier.controls",
"url":7,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_bezier.BendBezier.end",
"url":7,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_bezier.BendBezier.waveguide_type",
"url":7,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_bezier.BendBezier.port_names",
"url":7,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_bezier.BendBezier.raw_curve",
"url":7,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_bezier.BendBezier.build",
"url":7,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.bend.bend_circular",
"url":8,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_circular.BendCircular",
"url":8,
"doc":"Attributes: degrees: central angle of the bend, in degrees radius: raidus of the bend waveguide_type: type of waveguide of the bend port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() bend = BendCircular(name=\"s\", radius=5, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(bend)   ![BendCircular](images/bend_circular.png)"
},
{
"ref":"gpdk.components.bend.bend_circular.BendCircular.degrees",
"url":8,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_circular.BendCircular.radius",
"url":8,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_circular.BendCircular.waveguide_type",
"url":8,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_circular.BendCircular.port_names",
"url":8,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_circular.BendCircular.raw_curve",
"url":8,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_circular.BendCircular.build",
"url":8,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.bend.bend_euler",
"url":9,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler",
"url":9,
"doc":"Attributes: degrees: central angle in degrees radius_min: radius minimum p: radio of euler spiral in whole bend, 0 < p <= 1, when p = 1, there's no cirular part in the bend l_max: max length of euler spiral in half bend choose either p or l_max waveguide_type: type of waveguide of the bend port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() bend = BendEuler(name=\"e90\", radius_min=10, degrees=90, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(bend)   ![BendEuler](images/bend_euler.png)"
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler.degrees",
"url":9,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler.radius_eff",
"url":9,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler.radius_min",
"url":9,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler.p",
"url":9,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler.l_max",
"url":9,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler.waveguide_type",
"url":9,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler.port_names",
"url":9,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler.raw_curve",
"url":9,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler.build",
"url":9,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler90",
"url":9,
"doc":"Attributes: slab_square: bool, whether draw a square clad radius_min: radius minimum radius_eff: radius effective choose either radius_min(imum) or radius_eff(ective) p: radio of euler spiral in whole bend, 0 < p <= 1, when p = 1, there's no cirular part in the bend l_max: max length of euler spiral in half bend choose either p or l_max waveguide_type: type of waveguide of the bend port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() bend = BendEuler90(name=\"e90c\", radius_min=10, slab_square=True, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(bend)   ![BendEuler90](images/bend_euler_90.png)"
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler90.degrees",
"url":9,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler90.waveguide_type",
"url":9,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler90.slab_square",
"url":9,
"doc":""
},
{
"ref":"gpdk.components.bend.bend_euler.BendEuler90.build",
"url":9,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.bend.test",
"url":10,
"doc":""
},
{
"ref":"gpdk.components.bend.test.test_bend_bezier",
"url":11,
"doc":""
},
{
"ref":"gpdk.components.bend.test.test_bend_bezier.test_bend_bezier",
"url":11,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.bend.test.test_bend_circular",
"url":12,
"doc":""
},
{
"ref":"gpdk.components.bend.test.test_bend_circular.test_bend_circular",
"url":12,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.bend.test.test_bend_euler",
"url":13,
"doc":""
},
{
"ref":"gpdk.components.bend.test.test_bend_euler.test_bend_euler",
"url":13,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.bondpad",
"url":14,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad",
"url":15,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad.BondPad",
"url":15,
"doc":"Attributes: pad_width: defaults to 75, width of the bondpad pad_height: defaults to 75, height of the bondpad port_names: defaults to [\"ep_0\", \"ep_1\"] Examples:   bondpad = BondPad(pad_width=75, pad_height=75) fp.plot(bondpad)   ![BondPad](images/bondpad.png)"
},
{
"ref":"gpdk.components.bondpad.bondpad.BondPad.pad_width",
"url":15,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad.BondPad.pad_height",
"url":15,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad.BondPad.port_names",
"url":15,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad.BondPad.build",
"url":15,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.bondpad.bondpad.BondPad75",
"url":15,
"doc":"BondPad75( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.components.bondpad.bondpad.BondPad75.pad_width",
"url":15,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad.BondPad75.pad_height",
"url":15,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad.BondPad75.build",
"url":15,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.bondpad.bondpad.BondPad100",
"url":15,
"doc":"BondPad100( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.components.bondpad.bondpad.BondPad100.pad_width",
"url":15,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad.BondPad100.pad_height",
"url":15,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad.BondPad100.build",
"url":15,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.bondpad.bondpad_tapered",
"url":16,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad_tapered.BondPadTapered",
"url":16,
"doc":"Attributes: pad_width: defaults to 75, width of the bondpad pad_height: defaults to 75, height of the bondpad taper_width: defaults to 20, width of the far-end of the taper part taper_offset: defaults to 0, offset of the far-end, positive for left, negative for right. (base direction is from bondpad to taper) taper_width: defaults to 20, length of the taper part port_names: defaults to [\"ep_0\", \"ep_1\"] Examples:   bondpad = BondPadTapered(pad_width=75, pad_height=75) fp.plot(bondpad)   ![BondPadTapered](images/bondpad_tapered.png)"
},
{
"ref":"gpdk.components.bondpad.bondpad_tapered.BondPadTapered.pad_width",
"url":16,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad_tapered.BondPadTapered.pad_height",
"url":16,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad_tapered.BondPadTapered.taper_width",
"url":16,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad_tapered.BondPadTapered.taper_offset",
"url":16,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad_tapered.BondPadTapered.taper_length",
"url":16,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad_tapered.BondPadTapered.port_names",
"url":16,
"doc":""
},
{
"ref":"gpdk.components.bondpad.bondpad_tapered.BondPadTapered.build",
"url":16,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.bondpad.test",
"url":17,
"doc":""
},
{
"ref":"gpdk.components.bondpad.test.test_bondpad",
"url":18,
"doc":""
},
{
"ref":"gpdk.components.bondpad.test.test_bondpad.test_bondpad",
"url":18,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.bondpad.test.test_bondpad_tapered",
"url":19,
"doc":""
},
{
"ref":"gpdk.components.bondpad.test.test_bondpad_tapered.test_bondpad_tapered",
"url":19,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.combiner",
"url":20,
"doc":""
},
{
"ref":"gpdk.components.combiner.test",
"url":21,
"doc":""
},
{
"ref":"gpdk.components.combiner.test.test_y_combiner",
"url":22,
"doc":""
},
{
"ref":"gpdk.components.combiner.test.test_y_combiner.test_y_combiner",
"url":22,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.combiner.y_combiner",
"url":23,
"doc":""
},
{
"ref":"gpdk.components.combiner.y_combiner.YCombiner",
"url":23,
"doc":"Attributes: bend_radius: defaults to 15, bend radius out_degrees: defaults to 90, Angle at which the waveguide exit the combiner center_waveguide_length: Length of the center waveguide taper_length: Length of the tapered section waveguide_type: type of waveguide of the combiner port_names: defaults to [\"op_0\", \"op_1\", \"op_2\"] Examples:   y_combiner = YCombiner(waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(y_combiner)   ![YCombiner](images/y_combiner.png)"
},
{
"ref":"gpdk.components.combiner.y_combiner.YCombiner.bend_radius",
"url":23,
"doc":""
},
{
"ref":"gpdk.components.combiner.y_combiner.YCombiner.out_degrees",
"url":23,
"doc":""
},
{
"ref":"gpdk.components.combiner.y_combiner.YCombiner.center_waveguide_length",
"url":23,
"doc":""
},
{
"ref":"gpdk.components.combiner.y_combiner.YCombiner.taper_length",
"url":23,
"doc":""
},
{
"ref":"gpdk.components.combiner.y_combiner.YCombiner.waveguide_type",
"url":23,
"doc":""
},
{
"ref":"gpdk.components.combiner.y_combiner.YCombiner.port_names",
"url":23,
"doc":""
},
{
"ref":"gpdk.components.combiner.y_combiner.YCombiner.build",
"url":23,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.contact_hole",
"url":24,
"doc":""
},
{
"ref":"gpdk.components.contact_hole.contact_hole",
"url":25,
"doc":""
},
{
"ref":"gpdk.components.contact_hole.contact_hole.ContactHole",
"url":25,
"doc":"Attributes: num_sides: Number of sides of the polygon used for the contact hole top_width: Width of the top layer (2  inner radius of the polygon) tin_width: Width of the TiN layer bottom_width: Width of the bottom layer (2  inner radius of the polygon) via_width: Width of the via layer (2  inner radius of the polygon) port_names: defaults to [\"M1\"] Examples:   contact_hole = ContactHole(name=\"d\", num_sides=4, top_width=2, bottom_width=1.6, via_width=0.4) fp.plot(contact_hole)   ![ContactHole](images/contact_hole.png)"
},
{
"ref":"gpdk.components.contact_hole.contact_hole.ContactHole.num_sides",
"url":25,
"doc":""
},
{
"ref":"gpdk.components.contact_hole.contact_hole.ContactHole.top_width",
"url":25,
"doc":""
},
{
"ref":"gpdk.components.contact_hole.contact_hole.ContactHole.tin_width",
"url":25,
"doc":""
},
{
"ref":"gpdk.components.contact_hole.contact_hole.ContactHole.bottom_width",
"url":25,
"doc":""
},
{
"ref":"gpdk.components.contact_hole.contact_hole.ContactHole.via_width",
"url":25,
"doc":""
},
{
"ref":"gpdk.components.contact_hole.contact_hole.ContactHole.port_names",
"url":25,
"doc":""
},
{
"ref":"gpdk.components.contact_hole.contact_hole.ContactHole.build",
"url":25,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.contact_hole.test",
"url":26,
"doc":""
},
{
"ref":"gpdk.components.contact_hole.test.test_contact_hole",
"url":27,
"doc":""
},
{
"ref":"gpdk.components.contact_hole.test.test_contact_hole.test_contact_hole",
"url":27,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.directional_coupler",
"url":28,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_bend",
"url":29,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_bend.DirectionalCouplerBend",
"url":29,
"doc":"Attributes: coupler_spacing: Spacing between the two waveguide centre lines. coupler_length: Length of the directional coupler bend_radius: Bend radius for the auto-generated bends straight_after_bend: Length of the straight waveguide after the bend waveguide_type: type of waveguide port_names: defaults to [\"op_0\", \"op_1\", \"op_2\", \"op_3\"] Examples:   TECH = get_technology() dc = DirectionalCouplerBend(name=\"f\", coupler_spacing=0.7, coupler_length=6, bend_radius=10, straight_after_bend=6, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(dc)   ![DirectionCouplerBend](images/directional_coupler_bend.png)"
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_bend.DirectionalCouplerBend.coupler_spacing",
"url":29,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_bend.DirectionalCouplerBend.coupler_length",
"url":29,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_bend.DirectionalCouplerBend.bend_radius",
"url":29,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_bend.DirectionalCouplerBend.straight_after_bend",
"url":29,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_bend.DirectionalCouplerBend.waveguide_type",
"url":29,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_bend.DirectionalCouplerBend.port_names",
"url":29,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_bend.DirectionalCouplerBend.build",
"url":29,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_half_ring",
"url":30,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_half_ring.DCHalfRingStraight",
"url":30,
"doc":"Attributes: coupler_length: Length of the directional coupler coupler_spacing: Spacing between the two waveguide centre lines bend_radius: Bend radius for the auto-generated bends waveguide_type: type of waveguide port_names: defaults to [\"op_0\", \"op_1\", \"op_2\", \"op_3\"] Examples:   TECH = get_technology() dc = DirectionalCouplerBend(name=\"f\", coupler_spacing=0.7, coupler_length=6, bend_radius=10, straight_after_bend=6, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(dc)   ![DCHalfRingStraight](images/directional_coupler_half_ring.png)"
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_half_ring.DCHalfRingStraight.coupler_length",
"url":30,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_half_ring.DCHalfRingStraight.coupler_spacing",
"url":30,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_half_ring.DCHalfRingStraight.bend_radius",
"url":30,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_half_ring.DCHalfRingStraight.waveguide_type",
"url":30,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_half_ring.DCHalfRingStraight.port_names",
"url":30,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_half_ring.DCHalfRingStraight.build",
"url":30,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_sbend",
"url":31,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_sbend.DirectionalCouplerSBend",
"url":31,
"doc":"Attributes: coupler_spacing: Spacing between the two waveguide centre lines. coupler_length: Length of the directional coupler bend_radius: Bend radius for the auto-generated bends bend_degrees: Angle(in degrees) at which the directional coupler is bent straight_after_bend: Length of the straight waveguide after the bend waveguide_type: type of waveguide port_names: defaults to [\"op_0\", \"op_1\", \"op_2\", \"op_3\"] Examples:   TECH = get_technology() dc = DirectionalCouplerSBend(name=\"f\", coupler_spacing=0.7, coupler_length=6, bend_radius=10, bend_degrees=30, straight_after_bend=6, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(dc)   ![DirectionalCouplerSBend](images/directional_coupler_sbend.png)"
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_sbend.DirectionalCouplerSBend.coupler_spacing",
"url":31,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_sbend.DirectionalCouplerSBend.coupler_length",
"url":31,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_sbend.DirectionalCouplerSBend.bend_radius",
"url":31,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_sbend.DirectionalCouplerSBend.bend_degrees",
"url":31,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_sbend.DirectionalCouplerSBend.straight_after_bend",
"url":31,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_sbend.DirectionalCouplerSBend.waveguide_type",
"url":31,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_sbend.DirectionalCouplerSBend.port_names",
"url":31,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.directional_coupler_sbend.DirectionalCouplerSBend.build",
"url":31,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.directional_coupler.test",
"url":32,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.test.test_directional_coupler_bend",
"url":33,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.test.test_directional_coupler_bend.test_directional_coupler_bend",
"url":33,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.directional_coupler.test.test_directional_coupler_half_ring",
"url":34,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.test.test_directional_coupler_half_ring.test_directional_coupler_half_ring",
"url":34,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.directional_coupler.test.test_directional_coupler_sbend",
"url":35,
"doc":""
},
{
"ref":"gpdk.components.directional_coupler.test.test_directional_coupler_sbend.test_directional_coupler_sbend",
"url":35,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.fixed_edge_coupler",
"url":36,
"doc":""
},
{
"ref":"gpdk.components.fixed_edge_coupler.fixed_edge_coupler",
"url":37,
"doc":""
},
{
"ref":"gpdk.components.fixed_edge_coupler.fixed_edge_coupler.Fixed_Edge_Coupler",
"url":37,
"doc":"Fixed_Edge_Coupler( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.components.fixed_edge_coupler.fixed_edge_coupler.Fixed_Edge_Coupler.port_names",
"url":37,
"doc":""
},
{
"ref":"gpdk.components.fixed_edge_coupler.fixed_edge_coupler.Fixed_Edge_Coupler.build",
"url":37,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.fixed_edge_coupler.test",
"url":38,
"doc":""
},
{
"ref":"gpdk.components.fixed_edge_coupler.test.test_fixed_edge_coupler",
"url":39,
"doc":""
},
{
"ref":"gpdk.components.fixed_edge_coupler.test.test_fixed_edge_coupler.test_fixed_edge_coupler",
"url":39,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.fixed_mh_te_1550",
"url":40,
"doc":""
},
{
"ref":"gpdk.components.fixed_mh_te_1550.fixed_mh_te_1550",
"url":41,
"doc":""
},
{
"ref":"gpdk.components.fixed_mh_te_1550.fixed_mh_te_1550.Fixed_MH_TE_1550",
"url":41,
"doc":"Examples:   mh = Fixed_MH_TE_1550() fp.plot(mh)   ![Fixed_MH_TE_1550](images/fixed_mh_te_1550.png)"
},
{
"ref":"gpdk.components.fixed_mh_te_1550.fixed_mh_te_1550.Fixed_MH_TE_1550.json_folder",
"url":41,
"doc":""
},
{
"ref":"gpdk.components.fixed_mh_te_1550.fixed_mh_te_1550.Fixed_MH_TE_1550.json_name",
"url":41,
"doc":""
},
{
"ref":"gpdk.components.fixed_mh_te_1550.fixed_mh_te_1550.Fixed_MH_TE_1550.json_path",
"url":41,
"doc":""
},
{
"ref":"gpdk.components.fixed_mh_te_1550.fixed_mh_te_1550.Fixed_MH_TE_1550.library_folder",
"url":41,
"doc":""
},
{
"ref":"gpdk.components.fixed_mh_te_1550.fixed_mh_te_1550.Fixed_MH_TE_1550.library_path",
"url":41,
"doc":""
},
{
"ref":"gpdk.components.fixed_mh_te_1550.fixed_mh_te_1550.Fixed_MH_TE_1550.default_layers",
"url":41,
"doc":""
},
{
"ref":"gpdk.components.fixed_mh_te_1550.fixed_mh_te_1550.Fixed_MH_TE_1550.build",
"url":42,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.fixed_mh_te_1550.test",
"url":43,
"doc":""
},
{
"ref":"gpdk.components.fixed_mh_te_1550.test.test_fixed_mh_te_1550",
"url":44,
"doc":""
},
{
"ref":"gpdk.components.fixed_mh_te_1550.test.test_fixed_mh_te_1550.test_fixed_mh_te_1550",
"url":44,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.fixed_photo_detector",
"url":45,
"doc":""
},
{
"ref":"gpdk.components.fixed_photo_detector.fixed_photo_detector",
"url":46,
"doc":""
},
{
"ref":"gpdk.components.fixed_photo_detector.fixed_photo_detector.Fixed_Photo_Detector",
"url":46,
"doc":"Examples:   pd = Fixed_Photo_Detector() fp.plot(pd)   ![Fixed_Photo_Detector](images/fixed_photo_detector.png)"
},
{
"ref":"gpdk.components.fixed_photo_detector.fixed_photo_detector.Fixed_Photo_Detector.port_names",
"url":46,
"doc":""
},
{
"ref":"gpdk.components.fixed_photo_detector.fixed_photo_detector.Fixed_Photo_Detector.build",
"url":46,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.fixed_photo_detector.test",
"url":47,
"doc":""
},
{
"ref":"gpdk.components.fixed_photo_detector.test.test_fixed_photo_detector",
"url":48,
"doc":""
},
{
"ref":"gpdk.components.fixed_photo_detector.test.test_fixed_photo_detector.test_fixed_photo_detector",
"url":48,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.fixed_terminator_te_1550",
"url":49,
"doc":""
},
{
"ref":"gpdk.components.fixed_terminator_te_1550.fixed_terminator_te_1550",
"url":50,
"doc":""
},
{
"ref":"gpdk.components.fixed_terminator_te_1550.fixed_terminator_te_1550.Fixed_Terminator_TE_1550",
"url":50,
"doc":"Attributes: length: length of the terminator. waveguide_type: type of waveguide anchor: defaults to  Anchor.START Examples:   TECH = get_technology() tm = Fixed_Terminator_TE_1550(length=30, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(tm)   ![Fixed_Terminator_TE_1550](images/fixed_terminator_te_1550.png)"
},
{
"ref":"gpdk.components.fixed_terminator_te_1550.fixed_terminator_te_1550.Fixed_Terminator_TE_1550.length",
"url":50,
"doc":""
},
{
"ref":"gpdk.components.fixed_terminator_te_1550.fixed_terminator_te_1550.Fixed_Terminator_TE_1550.waveguide_type",
"url":50,
"doc":""
},
{
"ref":"gpdk.components.fixed_terminator_te_1550.fixed_terminator_te_1550.Fixed_Terminator_TE_1550.anchor",
"url":50,
"doc":""
},
{
"ref":"gpdk.components.fixed_terminator_te_1550.fixed_terminator_te_1550.Fixed_Terminator_TE_1550.port_names",
"url":50,
"doc":""
},
{
"ref":"gpdk.components.fixed_terminator_te_1550.fixed_terminator_te_1550.Fixed_Terminator_TE_1550.build",
"url":50,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.fixed_terminator_te_1550.test",
"url":51,
"doc":""
},
{
"ref":"gpdk.components.fixed_terminator_te_1550.test.test_fixed_terminator_te_1550",
"url":52,
"doc":""
},
{
"ref":"gpdk.components.fixed_terminator_te_1550.test.test_fixed_terminator_te_1550.test_fixed_terminator_te_1550",
"url":52,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.func_all",
"url":53,
"doc":""
},
{
"ref":"gpdk.components.grating_coupler",
"url":54,
"doc":""
},
{
"ref":"gpdk.components.grating_coupler.grating_coupler",
"url":55,
"doc":""
},
{
"ref":"gpdk.components.grating_coupler.grating_coupler.GratingCoupler",
"url":55,
"doc":"Attributes: length: defaults to 25.0 half_degrees: defaults to 20 ellipse_ratio: defaults to 1.0, Ellipse(Major/Minor) tooth_width: defaults to 0.5 etch_width: defaults to 0.5 teeth: defaults to 30 waveguide_type: type of waveguide port_names: defaults to [\"op_0\"] Examples:   TECH = get_technology() gc = GratingCoupler(name=\"f\", etch_width=0.5, tooth_width=0.5, length=25, half_degrees=40, teeth=30, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(gc)   ![GratingCoupler](images/grating_coupler.png)"
},
{
"ref":"gpdk.components.grating_coupler.grating_coupler.GratingCoupler.length",
"url":55,
"doc":""
},
{
"ref":"gpdk.components.grating_coupler.grating_coupler.GratingCoupler.half_degrees",
"url":55,
"doc":""
},
{
"ref":"gpdk.components.grating_coupler.grating_coupler.GratingCoupler.ellipse_ratio",
"url":55,
"doc":""
},
{
"ref":"gpdk.components.grating_coupler.grating_coupler.GratingCoupler.tooth_width",
"url":55,
"doc":""
},
{
"ref":"gpdk.components.grating_coupler.grating_coupler.GratingCoupler.etch_width",
"url":55,
"doc":""
},
{
"ref":"gpdk.components.grating_coupler.grating_coupler.GratingCoupler.teeth",
"url":55,
"doc":""
},
{
"ref":"gpdk.components.grating_coupler.grating_coupler.GratingCoupler.waveguide_type",
"url":55,
"doc":""
},
{
"ref":"gpdk.components.grating_coupler.grating_coupler.GratingCoupler.port_names",
"url":55,
"doc":""
},
{
"ref":"gpdk.components.grating_coupler.grating_coupler.GratingCoupler.build",
"url":55,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.grating_coupler.test",
"url":56,
"doc":""
},
{
"ref":"gpdk.components.grating_coupler.test.test_grating_coupler",
"url":57,
"doc":""
},
{
"ref":"gpdk.components.grating_coupler.test.test_grating_coupler.test_grating_coupler",
"url":57,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.heater",
"url":58,
"doc":""
},
{
"ref":"gpdk.components.heater.si_heater",
"url":59,
"doc":""
},
{
"ref":"gpdk.components.heater.si_heater.SiHeater",
"url":59,
"doc":"Attributes: length: defaults to 0.5, length of the heater half_metal_width: defaults to 1.0, Half width of M1 layer waveguide_type: type of waveguide port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() heater = SiHeater(length=50, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(heater)   ![SiHeater](images/si_heater.png)"
},
{
"ref":"gpdk.components.heater.si_heater.SiHeater.length",
"url":59,
"doc":""
},
{
"ref":"gpdk.components.heater.si_heater.SiHeater.half_metal_width",
"url":59,
"doc":""
},
{
"ref":"gpdk.components.heater.si_heater.SiHeater.waveguide_type",
"url":59,
"doc":""
},
{
"ref":"gpdk.components.heater.si_heater.SiHeater.port_names",
"url":59,
"doc":""
},
{
"ref":"gpdk.components.heater.si_heater.SiHeater.build",
"url":59,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.heater.test",
"url":60,
"doc":""
},
{
"ref":"gpdk.components.heater.test.test_si_heater",
"url":61,
"doc":""
},
{
"ref":"gpdk.components.heater.test.test_si_heater.test_si_heater",
"url":61,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.heater.test.test_tin_heater",
"url":62,
"doc":""
},
{
"ref":"gpdk.components.heater.test.test_tin_heater.test_tin_heater",
"url":62,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.heater.tin_heater",
"url":63,
"doc":""
},
{
"ref":"gpdk.components.heater.tin_heater.TiNHeater",
"url":63,
"doc":"Attributes: waveguide_length: defaults to 25, Waveguide length tin_length: defaults to 15, TiN length tin_width: defaults to 2.0, TiN width tin_box_size: defaults to 8, TiN box edge size metal_box_size: defaults to 10, Metal box edge size contact_box_size: defaults to 6, Contact box edge size waveguide_type: type of waveguide port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() heater = TiNHeater(waveguide_length=50, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(heater)   ![TiNHeater](images/tin_heater.png)"
},
{
"ref":"gpdk.components.heater.tin_heater.TiNHeater.waveguide_length",
"url":63,
"doc":""
},
{
"ref":"gpdk.components.heater.tin_heater.TiNHeater.tin_length",
"url":63,
"doc":""
},
{
"ref":"gpdk.components.heater.tin_heater.TiNHeater.tin_width",
"url":63,
"doc":""
},
{
"ref":"gpdk.components.heater.tin_heater.TiNHeater.tin_box_size",
"url":63,
"doc":""
},
{
"ref":"gpdk.components.heater.tin_heater.TiNHeater.metal_box_size",
"url":63,
"doc":""
},
{
"ref":"gpdk.components.heater.tin_heater.TiNHeater.contact_box_size",
"url":63,
"doc":""
},
{
"ref":"gpdk.components.heater.tin_heater.TiNHeater.waveguide_type",
"url":63,
"doc":""
},
{
"ref":"gpdk.components.heater.tin_heater.TiNHeater.port_names",
"url":63,
"doc":""
},
{
"ref":"gpdk.components.heater.tin_heater.TiNHeater.build",
"url":63,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.mmi",
"url":64,
"doc":""
},
{
"ref":"gpdk.components.mmi.mmi",
"url":65,
"doc":""
},
{
"ref":"gpdk.components.mmi.mmi.Mmi",
"url":65,
"doc":"Attributes: mid_wav_core_width: defaults to 5 wav_core_width: defaults to 1 n_inputs: defaults to 1 n_outputs: defaults to 2 length: defaults to 25 transition_length: defaults to 5 trace_spacing: defaults to 2 waveguide_type: type of waveguide Examples:   TECH = get_technology() mmi = Mmi(waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(mmi)   ![Mmi](images/mmi.png)"
},
{
"ref":"gpdk.components.mmi.mmi.Mmi.mid_wav_core_width",
"url":65,
"doc":""
},
{
"ref":"gpdk.components.mmi.mmi.Mmi.wav_core_width",
"url":65,
"doc":""
},
{
"ref":"gpdk.components.mmi.mmi.Mmi.n_inputs",
"url":65,
"doc":""
},
{
"ref":"gpdk.components.mmi.mmi.Mmi.n_outputs",
"url":65,
"doc":""
},
{
"ref":"gpdk.components.mmi.mmi.Mmi.length",
"url":65,
"doc":""
},
{
"ref":"gpdk.components.mmi.mmi.Mmi.transition_length",
"url":65,
"doc":""
},
{
"ref":"gpdk.components.mmi.mmi.Mmi.trace_spacing",
"url":65,
"doc":""
},
{
"ref":"gpdk.components.mmi.mmi.Mmi.waveguide_type",
"url":65,
"doc":""
},
{
"ref":"gpdk.components.mmi.mmi.Mmi.build",
"url":65,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.mmi.mmi.Mmi1x2",
"url":65,
"doc":"Mmi1x2( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.components.mmi.mmi.Mmi1x2.n_inputs",
"url":65,
"doc":""
},
{
"ref":"gpdk.components.mmi.mmi.Mmi1x2.n_outputs",
"url":65,
"doc":""
},
{
"ref":"gpdk.components.mmi.mmi.Mmi1x2.build",
"url":65,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.mmi.test",
"url":66,
"doc":""
},
{
"ref":"gpdk.components.mmi.test.test_mmi",
"url":67,
"doc":""
},
{
"ref":"gpdk.components.mmi.test.test_mmi.test_mmi",
"url":67,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.my_pcell",
"url":68,
"doc":""
},
{
"ref":"gpdk.components.my_pcell.my_pcell",
"url":69,
"doc":""
},
{
"ref":"gpdk.components.my_pcell.my_pcell.my_func",
"url":69,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.my_pcell.my_pcell.CallableClass",
"url":69,
"doc":""
},
{
"ref":"gpdk.components.my_pcell.my_pcell.MyCell",
"url":69,
"doc":"MyCell( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.components.my_pcell.my_pcell.MyCell.x",
"url":69,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.my_pcell.my_pcell.MyCell.y",
"url":69,
"doc":""
},
{
"ref":"gpdk.components.my_pcell.my_pcell.MyCell.build",
"url":69,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.my_pcell.test",
"url":70,
"doc":""
},
{
"ref":"gpdk.components.mzm",
"url":71,
"doc":""
},
{
"ref":"gpdk.components.mzm.mzm",
"url":72,
"doc":""
},
{
"ref":"gpdk.components.mzm.mzm.Mzm",
"url":72,
"doc":"Attributes: p_width: defaults to 1 n_width: defaults to 1 np_offset: defaults to 0 wg_length: defaults to 25 phase_shifter_spacing: defaults to 100 splitter_wg_length: defaults to 100 waveguide_type: type of waveguide pn_phase_shifter_0: instance of  PnPhaseShifter , port_count=2, pin_count=2, required=False pn_phase_shifter_1: instance of  PnPhaseShifter , port_count=2, pin_count=2, required=False y_splitter: instance of  YSplitter , port_count=3, required=False y_combiner: instance of  YCombiner , port_count=3, required=False port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() mzm = Mzm(wg_length=600, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(mzm)   ![Mzm](images/mzm.png)"
},
{
"ref":"gpdk.components.mzm.mzm.Mzm.p_width",
"url":72,
"doc":""
},
{
"ref":"gpdk.components.mzm.mzm.Mzm.n_width",
"url":72,
"doc":""
},
{
"ref":"gpdk.components.mzm.mzm.Mzm.np_offset",
"url":72,
"doc":""
},
{
"ref":"gpdk.components.mzm.mzm.Mzm.wg_length",
"url":72,
"doc":""
},
{
"ref":"gpdk.components.mzm.mzm.Mzm.phase_shifter_spacing",
"url":72,
"doc":""
},
{
"ref":"gpdk.components.mzm.mzm.Mzm.splitter_wg_length",
"url":72,
"doc":""
},
{
"ref":"gpdk.components.mzm.mzm.Mzm.waveguide_type",
"url":72,
"doc":""
},
{
"ref":"gpdk.components.mzm.mzm.Mzm.pn_phase_shifter_0",
"url":72,
"doc":""
},
{
"ref":"gpdk.components.mzm.mzm.Mzm.pn_phase_shifter_1",
"url":72,
"doc":""
},
{
"ref":"gpdk.components.mzm.mzm.Mzm.y_splitter",
"url":72,
"doc":""
},
{
"ref":"gpdk.components.mzm.mzm.Mzm.y_combiner",
"url":72,
"doc":""
},
{
"ref":"gpdk.components.mzm.mzm.Mzm.port_names",
"url":72,
"doc":""
},
{
"ref":"gpdk.components.mzm.mzm.Mzm.build",
"url":72,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.mzm.test",
"url":73,
"doc":""
},
{
"ref":"gpdk.components.mzm.test.test_mzm",
"url":74,
"doc":""
},
{
"ref":"gpdk.components.mzm.test.test_mzm.test_mzm",
"url":74,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.mzm.test.test_TW_mzm",
"url":75,
"doc":""
},
{
"ref":"gpdk.components.mzm.test.test_TW_mzm.test_TW_mzm",
"url":75,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.mzm.TW_mzm",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm",
"url":76,
"doc":"Attributes: modulator_length: defaults to 500 delta: defaults to 60 ground_width: defaults to 80 signal_width: defaults to 10 metal_spacing: defaults to 3 delay: defaults to 0 additional_length: defaults to 50 pad_width: defaults to 50 pad_length: defaults to 70 taper_length: defaults to 60 period_pad: defaults to 70 waveguide_type: type of waveguide mzm: instance of  Mzm , port_count=2, required=False port_names: defaults to [\"elec_g1\", \"elec_g2\", \"elec_g3\", \"elec_s1\", \"elec_s2\", \"elec_g4\", \"elec_g5\", \"elec_g6\", \"elec_s3\", \"elec_s4\"] Examples:   TECH = get_technology() mzm = TW_Mzm(modulator_length=500, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(mzm)   ![TW_Mzm](images/TW_mzm.png)"
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.modulator_length",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.delta",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.ground_width",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.signal_width",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.metal_spacing",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.delay",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.additional_length",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.pad_width",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.pad_length",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.taper_length",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.period_pad",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.waveguide_type",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.mzm",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.port_names",
"url":76,
"doc":""
},
{
"ref":"gpdk.components.mzm.TW_mzm.TW_Mzm.build",
"url":76,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.m_taper",
"url":77,
"doc":""
},
{
"ref":"gpdk.components.m_taper.m_taper",
"url":78,
"doc":""
},
{
"ref":"gpdk.components.m_taper.m_taper.MTaper",
"url":78,
"doc":"Attributes: initial_width: defaults to 21 final_width: defaults to 75 final_offset: defaults to 0, offset of the far-end, positive for left, negative for right length: defaults to 20 Examples:   TECH = get_technology() m_taper = MTaper(final_offset=27) fp.plot(m_taper)   ![MTaper](images/M_Taper.png)"
},
{
"ref":"gpdk.components.m_taper.m_taper.MTaper.initial_width",
"url":78,
"doc":""
},
{
"ref":"gpdk.components.m_taper.m_taper.MTaper.final_width",
"url":78,
"doc":""
},
{
"ref":"gpdk.components.m_taper.m_taper.MTaper.final_offset",
"url":78,
"doc":""
},
{
"ref":"gpdk.components.m_taper.m_taper.MTaper.length",
"url":78,
"doc":""
},
{
"ref":"gpdk.components.m_taper.m_taper.MTaper.build",
"url":78,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.m_taper.test",
"url":79,
"doc":""
},
{
"ref":"gpdk.components.m_taper.test.test_m_taper",
"url":80,
"doc":""
},
{
"ref":"gpdk.components.m_taper.test.test_m_taper.test_m_taper",
"url":80,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.pn_phase_shifter",
"url":81,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter",
"url":82,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter.PnPhaseShifter",
"url":82,
"doc":"Attributes: p_width: defaults to 1 n_width: defaults to 1 np_offset: defaults to 0 wg_length: defaults to 25 waveguide_type: type of waveguide port_names: defaults to [\"op_0\", \"op_1\", \"ep_0\", \"ep_1\"] Examples:   TECH = get_technology() ps = PnPhaseShifter(name=\"p1\", wg_length=200, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(ps)   ![PnPhaseShifter](images/pn_phase_shifter.png)"
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter.PnPhaseShifter.p_width",
"url":82,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter.PnPhaseShifter.n_width",
"url":82,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter.PnPhaseShifter.np_offset",
"url":82,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter.PnPhaseShifter.wg_length",
"url":82,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter.PnPhaseShifter.waveguide_type",
"url":82,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter.PnPhaseShifter.port_names",
"url":82,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter.PnPhaseShifter.build",
"url":82,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter_sample",
"url":83,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter_sample.PnPhaseShifter",
"url":83,
"doc":"Attributes:  . Examples:   TECH = get_technology() ps = PnPhaseShifter(name=\"p1\") fp.plot(ps)  "
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter_sample.PnPhaseShifter.name",
"url":83,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter_sample.PnPhaseShifter.bands",
"url":83,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter_sample.PnPhaseShifter.patches",
"url":83,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter_sample.PnPhaseShifter.port_names",
"url":83,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter_sample.PnPhaseShifter.transform",
"url":83,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.pn_phase_shifter_sample.PnPhaseShifter.build",
"url":83,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.pn_phase_shifter.test",
"url":84,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.test.test_pn_phase_shifter",
"url":85,
"doc":""
},
{
"ref":"gpdk.components.pn_phase_shifter.test.test_pn_phase_shifter.test_pn_phase_shifter",
"url":85,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.ring_filter",
"url":86,
"doc":""
},
{
"ref":"gpdk.components.ring_filter.ring_filter",
"url":87,
"doc":""
},
{
"ref":"gpdk.components.ring_filter.ring_filter.RingFilter",
"url":87,
"doc":"Attributes: ring_radius: defaults to 10 gap: defaults to 0.2 gap_monitor: defaults to 0.5 waveguide_type: type of waveguide port_names: defaults to [\"op_0\", \"op_1\", \"op_2\", \"op_3\", \"ep_0\", \"ep_1\"] Examples:   TECH = get_technology() ring = RingFilter(name=\"f1\", waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(ring)   ![RingFilter](images/ring_filter.png)"
},
{
"ref":"gpdk.components.ring_filter.ring_filter.RingFilter.ring_radius",
"url":87,
"doc":""
},
{
"ref":"gpdk.components.ring_filter.ring_filter.RingFilter.gap",
"url":87,
"doc":""
},
{
"ref":"gpdk.components.ring_filter.ring_filter.RingFilter.gap_monitor",
"url":87,
"doc":""
},
{
"ref":"gpdk.components.ring_filter.ring_filter.RingFilter.waveguide_type",
"url":87,
"doc":""
},
{
"ref":"gpdk.components.ring_filter.ring_filter.RingFilter.port_names",
"url":87,
"doc":""
},
{
"ref":"gpdk.components.ring_filter.ring_filter.RingFilter.build",
"url":87,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.ring_filter.test",
"url":88,
"doc":""
},
{
"ref":"gpdk.components.ring_filter.test.test_ring_filter",
"url":89,
"doc":""
},
{
"ref":"gpdk.components.ring_filter.test.test_ring_filter.test_ring_filter",
"url":89,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.ring_modulator",
"url":90,
"doc":""
},
{
"ref":"gpdk.components.ring_modulator.ring_modulator",
"url":91,
"doc":""
},
{
"ref":"gpdk.components.ring_modulator.ring_modulator.RingModulator",
"url":91,
"doc":"Attributes: gap_monitor: defaults to 0.4 gap: defaults to 0.2 ring_radius: defaults to 10 waveguide_type: type of waveguide ring_filter: instance of  RingFilter , port_count=4, pin_count=2, required=False port_names: defaults to [\"op_0\", \"op_1\", \"op_2\", \"op_3\", \"ep_0\", \"ep_1\", \"ep_2\", \"ep_3\"] Examples:   TECH = get_technology() ring = RingModulator(waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(ring)   ![RingModulator](images/ring_modulator.png)"
},
{
"ref":"gpdk.components.ring_modulator.ring_modulator.RingModulator.gap_monitor",
"url":91,
"doc":""
},
{
"ref":"gpdk.components.ring_modulator.ring_modulator.RingModulator.gap",
"url":91,
"doc":""
},
{
"ref":"gpdk.components.ring_modulator.ring_modulator.RingModulator.ring_radius",
"url":91,
"doc":""
},
{
"ref":"gpdk.components.ring_modulator.ring_modulator.RingModulator.waveguide_type",
"url":91,
"doc":""
},
{
"ref":"gpdk.components.ring_modulator.ring_modulator.RingModulator.ring_filter",
"url":91,
"doc":""
},
{
"ref":"gpdk.components.ring_modulator.ring_modulator.RingModulator.port_names",
"url":91,
"doc":""
},
{
"ref":"gpdk.components.ring_modulator.ring_modulator.RingModulator.build",
"url":91,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.ring_modulator.test",
"url":92,
"doc":""
},
{
"ref":"gpdk.components.ring_modulator.test.test_ring_modulator",
"url":93,
"doc":""
},
{
"ref":"gpdk.components.ring_modulator.test.test_ring_modulator.test_ring_modulator",
"url":93,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.ring_resonator",
"url":94,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator",
"url":95,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator.RingResonator",
"url":95,
"doc":"Attributes: ring_radius: defaults to 5, Radius of the ring top_spacing: defaults to 0.2, Spacing between top and ring waveguides bottom_spacing: defaults to 0.2, Spacing between ring and bottom waveguides ring_type: type of waveguide of ring top_type: type of waveguide of top bus bottom_type: type of waveguide of bottom bus port_names: defaults to [\"op_0\", \"op_1\", \"op_2\", \"op_3\"] Examples:   TECH = get_technology() ring = RingResonator(ring_type=TECH.WG.FWG.C.WIRE, top_type=TECH.WG.FWG.C.WIRE, bottom_type=TECH.WG.FWG.C.WIRE) fp.plot(ring)   ![RingResonator](images/ring_resonator.png)"
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator.RingResonator.ring_radius",
"url":95,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator.RingResonator.top_spacing",
"url":95,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator.RingResonator.bottom_spacing",
"url":95,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator.RingResonator.ring_type",
"url":95,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator.RingResonator.top_type",
"url":95,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator.RingResonator.bottom_type",
"url":95,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator.RingResonator.port_names",
"url":95,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator.RingResonator.build",
"url":95,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator_single_bus",
"url":96,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator_single_bus.RingResonatorSingleBus",
"url":96,
"doc":"Attributes: ring_radius: defaults to 5, Radius of the ring top_spacing: defaults to 0.2, Spacing between top and ring waveguides bottom_spacing: defaults to 0.2, Spacing between ring and bottom waveguides ring_type: type of waveguide of ring bottom_type: type of waveguide of bottom bus port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() ring = RingResonatorSingleBus(ring_type=TECH.WG.FWG.C.WIRE, bottom_type=TECH.WG.FWG.C.WIRE) fp.plot(ring)   ![RingResonatorSingleBus](images/ring_resonator_single_bus.png)"
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator_single_bus.RingResonatorSingleBus.ring_radius",
"url":96,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator_single_bus.RingResonatorSingleBus.bottom_spacing",
"url":96,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator_single_bus.RingResonatorSingleBus.ring_type",
"url":96,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator_single_bus.RingResonatorSingleBus.bottom_type",
"url":96,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator_single_bus.RingResonatorSingleBus.port_names",
"url":96,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.ring_resonator_single_bus.RingResonatorSingleBus.build",
"url":96,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.ring_resonator.test",
"url":97,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.test.test_ring_resonator",
"url":98,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.test.test_ring_resonator.test_ring_resonator",
"url":98,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.ring_resonator.test.test_ring_resonator_single_bus",
"url":99,
"doc":""
},
{
"ref":"gpdk.components.ring_resonator.test.test_ring_resonator_single_bus.test_ring_resonator_single_bus",
"url":99,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.sbend",
"url":100,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend",
"url":101,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend.SBend",
"url":101,
"doc":"Attributes: distance: required=False height: defaults to 10 bend_degrees: required=False, max_distance: required=False, if final distance is greater than max_distance, then use max_distance as final distance bend_factory: Optional bend factory waveguide_type: type of waveguide port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() sbend = SBend(name=\"f\", distance=100, height=90, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(sbend)   ![SBend](images/sbend.png)"
},
{
"ref":"gpdk.components.sbend.sbend.SBend.distance",
"url":101,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend.SBend.height",
"url":101,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend.SBend.bend_degrees",
"url":101,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend.SBend.max_distance",
"url":101,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend.SBend.bend_factory",
"url":101,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend.SBend.waveguide_type",
"url":101,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend.SBend.port_names",
"url":101,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend.SBend.build",
"url":101,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.sbend.sbend.SBendPair",
"url":101,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.sbend.sbend_circular",
"url":102,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircular",
"url":102,
"doc":"Attributes: distance: defaults to 20 height: defaults to 10 min_radius: required=False waveguide_type: type of waveguide port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() sbend = SBendCircular(name=\"f\", distance=100, height=15, min_radius=15, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(sbend)   ![SBendCircular](images/sbend_circular.png)"
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircular.distance",
"url":102,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircular.height",
"url":102,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircular.min_radius",
"url":102,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircular.waveguide_type",
"url":102,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircular.port_names",
"url":102,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircular.build",
"url":102,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircularPair",
"url":102,
"doc":"SBendCircularPair( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircularPair.left_spacing",
"url":102,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircularPair.right_spacing",
"url":102,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircularPair.bend_degrees",
"url":102,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircularPair.min_radius",
"url":102,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircularPair.waveguide_type",
"url":102,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircularPair.port_names",
"url":102,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_circular.SBendCircularPair.build",
"url":102,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.sbend.sbend_cosine",
"url":103,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_cosine.SCosine",
"url":103,
"doc":"SCosine( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.components.sbend.sbend_cosine.SCosine.distance",
"url":103,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_cosine.SCosine.height",
"url":103,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_cosine.SCosine.transform",
"url":103,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_cosine.SCosine.curve_function",
"url":103,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.sbend.sbend_cosine.SCosine.raw_end_orientations",
"url":103,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_cosine.SBendCosine",
"url":103,
"doc":"Attributes: distance: defaults to 20 height: defaults to 10 min_radius: required=False waveguide_type: type of waveguide port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() sbend = SBendCosine(name=\"f\", distance=100, height=15, min_radius=15, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(sbend)   ![SBendCosine](images/sbend_cosine.png)"
},
{
"ref":"gpdk.components.sbend.sbend_cosine.SBendCosine.distance",
"url":103,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_cosine.SBendCosine.height",
"url":103,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_cosine.SBendCosine.waveguide_type",
"url":103,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_cosine.SBendCosine.port_names",
"url":103,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_cosine.SBendCosine.raw_curve",
"url":103,
"doc":""
},
{
"ref":"gpdk.components.sbend.sbend_cosine.SBendCosine.build",
"url":103,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.sbend.test",
"url":104,
"doc":""
},
{
"ref":"gpdk.components.sbend.test.test_sbend",
"url":105,
"doc":""
},
{
"ref":"gpdk.components.sbend.test.test_sbend.test_sbend",
"url":105,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.sbend.test.test_sbend_circular",
"url":106,
"doc":""
},
{
"ref":"gpdk.components.sbend.test.test_sbend_circular.test_sbend_circular",
"url":106,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.sbend.test.test_sbend_cosine",
"url":107,
"doc":""
},
{
"ref":"gpdk.components.sbend.test.test_sbend_cosine.test_sbend_cosine",
"url":107,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.spiral",
"url":108,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral",
"url":109,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral.Spiral",
"url":109,
"doc":"Attributes: bend_radius: defaults to 5 min_straight: defaults to 0 spacing: defaults to 6 total_length: defaults to 4000.0 n_o_loops: defaults to 5 waveguide_type: type of waveguide port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() spiral = Spiral(total_length=2000, n_o_loops=6, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(spiral)   ![Spiral](images/spiral.png)"
},
{
"ref":"gpdk.components.spiral.spiral.Spiral.bend_radius",
"url":109,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral.Spiral.min_straight",
"url":109,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral.Spiral.spacing",
"url":109,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral.Spiral.total_length",
"url":109,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral.Spiral.n_o_loops",
"url":109,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral.Spiral.waveguide_type",
"url":109,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral.Spiral.port_names",
"url":109,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral.Spiral.generate_waveguides",
"url":109,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.spiral.spiral.Spiral.build",
"url":109,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.spiral.spiral2",
"url":110,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral2.Spiral",
"url":110,
"doc":"Attributes: bend_radius: defaults to 5 min_straight: defaults to 0 spacing: defaults to 6 total_length: defaults to 4000.0 n_o_loops: defaults to 5 waveguide_type: type of waveguide port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() spiral = Spiral(total_length=2000, n_o_loops=6, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(spiral)   ![Spiral](images/spiral.png)"
},
{
"ref":"gpdk.components.spiral.spiral2.Spiral.bend_radius",
"url":110,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral2.Spiral.min_straight",
"url":110,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral2.Spiral.spacing",
"url":110,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral2.Spiral.total_length",
"url":110,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral2.Spiral.n_o_loops",
"url":110,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral2.Spiral.waveguide_type",
"url":110,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral2.Spiral.port_names",
"url":110,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral2.Spiral.bend90",
"url":110,
"doc":""
},
{
"ref":"gpdk.components.spiral.spiral2.Spiral.bend_factory",
"url":110,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.spiral.spiral2.Spiral.route",
"url":110,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.spiral.spiral2.Spiral.build",
"url":110,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.spiral.test",
"url":111,
"doc":""
},
{
"ref":"gpdk.components.spiral.test.test_spiral",
"url":112,
"doc":""
},
{
"ref":"gpdk.components.spiral.test.test_spiral.test_spiral",
"url":112,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.splitter",
"url":113,
"doc":""
},
{
"ref":"gpdk.components.splitter.test",
"url":114,
"doc":""
},
{
"ref":"gpdk.components.splitter.test.test_y_splitter",
"url":115,
"doc":""
},
{
"ref":"gpdk.components.splitter.test.test_y_splitter.test_y_splitter",
"url":115,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.splitter.y_splitter",
"url":116,
"doc":""
},
{
"ref":"gpdk.components.splitter.y_splitter.YSplitter",
"url":116,
"doc":"Attributes: bend_radius: defaults to 15, Bend radius out_degrees: defaults to 90, Angle at which the waveguide exit the splitter center_waveguide_length: defaults to 2.0, Length of the center waveguide taper_length: defaults to 0.1, Length of the tapered section waveguide_type: type of waveguide port_names: defaults to [\"op_0\", \"op_1\", \"op_2\"] Examples:   TECH = get_technology() splitter = YSplitter(waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(splitter)   ![YSplitter](images/y_splitter.png)"
},
{
"ref":"gpdk.components.splitter.y_splitter.YSplitter.bend_radius",
"url":116,
"doc":""
},
{
"ref":"gpdk.components.splitter.y_splitter.YSplitter.out_degrees",
"url":116,
"doc":""
},
{
"ref":"gpdk.components.splitter.y_splitter.YSplitter.center_waveguide_length",
"url":116,
"doc":""
},
{
"ref":"gpdk.components.splitter.y_splitter.YSplitter.taper_length",
"url":116,
"doc":""
},
{
"ref":"gpdk.components.splitter.y_splitter.YSplitter.waveguide_type",
"url":116,
"doc":""
},
{
"ref":"gpdk.components.splitter.y_splitter.YSplitter.port_names",
"url":116,
"doc":""
},
{
"ref":"gpdk.components.splitter.y_splitter.YSplitter.build",
"url":116,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.straight",
"url":117,
"doc":""
},
{
"ref":"gpdk.components.straight.straight",
"url":118,
"doc":""
},
{
"ref":"gpdk.components.straight.straight.Straight",
"url":118,
"doc":"Attributes: length: length of straight waveguide_type: type of waveguide anchor: defaults to  Anchor.START , origin of the straight(START at origin, CENTER at origin or End at origin) port_names: defaults to [\"op_0\", \"op_1\", \"op_2\"] Examples:   TECH = get_technology() straight = Straight(name=\"s\", length=10, waveguide_type=TECH.WG.FWG.C.WIRE) fp.plot(straight)   ![Straight](images/straight.png)"
},
{
"ref":"gpdk.components.straight.straight.Straight.length",
"url":118,
"doc":""
},
{
"ref":"gpdk.components.straight.straight.Straight.waveguide_type",
"url":118,
"doc":""
},
{
"ref":"gpdk.components.straight.straight.Straight.anchor",
"url":118,
"doc":""
},
{
"ref":"gpdk.components.straight.straight.Straight.port_names",
"url":118,
"doc":""
},
{
"ref":"gpdk.components.straight.straight.Straight.raw_curve",
"url":118,
"doc":""
},
{
"ref":"gpdk.components.straight.straight.Straight.build",
"url":118,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.straight.straight.StraightBetween",
"url":118,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.straight.test",
"url":119,
"doc":""
},
{
"ref":"gpdk.components.straight.test.test_straight",
"url":120,
"doc":""
},
{
"ref":"gpdk.components.straight.test.test_straight.test_straight",
"url":120,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.taper",
"url":121,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_linear",
"url":122,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_linear.TaperLinear",
"url":122,
"doc":"Attributes: length: length of straight left_type: type of waveguide of start right_type: type of waveguide of end anchor: defaults to  Anchor.START , origin of the straight(START at origin, CENTER at origin or End at origin) port_names: defaults to [\"op_0\", \"op_1\", \"op_2\"] Examples:   TECH = get_technology() swg = TECH.WG.SWG.C.WIRE.updated(core_design_width=3.8, cladding_design_width=9.6) taper = TaperLinear(name=\"a\", length=20, left_type=swg, right_type=TECH.WG.SWG.C.WIRE) fp.plot(taper)   ![TaperLinear](images/taper_linear.png)"
},
{
"ref":"gpdk.components.taper.taper_linear.TaperLinear.length",
"url":122,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_linear.TaperLinear.left_type",
"url":122,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_linear.TaperLinear.right_type",
"url":122,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_linear.TaperLinear.anchor",
"url":122,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_linear.TaperLinear.port_names",
"url":122,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_linear.TaperLinear.raw_curve",
"url":122,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_linear.TaperLinear.build",
"url":122,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.taper.taper_parabolic",
"url":123,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_parabolic.TaperParabolic",
"url":123,
"doc":"Attributes: length: length of straight left_type: type of waveguide of start right_type: type of waveguide of end step: more steps means more accurate to the parabolic curve anchor: defaults to  Anchor.START , origin of the straight(START at origin, CENTER at origin or End at origin) port_names: defaults to [\"op_0\", \"op_1\", \"op_2\"] Examples:   TECH = get_technology() swg = TECH.WG.SWG.C.WIRE.updated(core_design_width=3.8, cladding_design_width=9.6) taper = TaperParabolic(name=\"a\", length=20, left_type=swg_update, right_type=TECH.WG.SWG.C.WIRE) fp.plot(taper)   ![TaperParabolic](images/taper_parabolic.png)"
},
{
"ref":"gpdk.components.taper.taper_parabolic.TaperParabolic.length",
"url":123,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_parabolic.TaperParabolic.left_type",
"url":123,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_parabolic.TaperParabolic.right_type",
"url":123,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_parabolic.TaperParabolic.step",
"url":123,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_parabolic.TaperParabolic.anchor",
"url":123,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_parabolic.TaperParabolic.port_names",
"url":123,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_parabolic.TaperParabolic.raw_curve",
"url":123,
"doc":""
},
{
"ref":"gpdk.components.taper.taper_parabolic.TaperParabolic.build",
"url":123,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.taper.test",
"url":124,
"doc":""
},
{
"ref":"gpdk.components.taper.test.test_taper_linear",
"url":125,
"doc":""
},
{
"ref":"gpdk.components.taper.test.test_taper_linear.test_taper_linear",
"url":125,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.taper.test.test_taper_parabolic",
"url":126,
"doc":""
},
{
"ref":"gpdk.components.taper.test.test_taper_parabolic.test_taper_parabolic",
"url":126,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.transition",
"url":127,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2mwg_transition",
"url":128,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2mwg_transition.FWG2MWGTransition",
"url":128,
"doc":"Attributes: length: defaults to 20, Length of transition wire_only_length: defaults to 5.0, Length of transition where shallow part is built up deep_only_width: defaults to 3.0, Core width of the waveguide at the end of shallow transition part fwg_type: type of FWG waveguide mwg_type: type of MWG waveguide anchor: defaults to  Anchor.START , origin of the straight(START at origin, CENTER at origin or End at origin) port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() transition = FWG2MWGTransition(name=\"a\", length=20, fwg_type=TECH.WG.FWG.C.WIRE, mwg_type=TECH.WG.MWG.C.WIRE) fp.plot(transition)   ![FWG2MWGTransition](images/fwg2mwg_transition.png)"
},
{
"ref":"gpdk.components.transition.fwg2mwg_transition.FWG2MWGTransition.length",
"url":128,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2mwg_transition.FWG2MWGTransition.wire_only_length",
"url":128,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2mwg_transition.FWG2MWGTransition.deep_only_width",
"url":128,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2mwg_transition.FWG2MWGTransition.fwg_type",
"url":128,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2mwg_transition.FWG2MWGTransition.mwg_type",
"url":128,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2mwg_transition.FWG2MWGTransition.anchor",
"url":128,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2mwg_transition.FWG2MWGTransition.port_names",
"url":128,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2mwg_transition.FWG2MWGTransition.build",
"url":128,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.transition.fwg2mwg_transition.FWG2MWGTransition.raw_curve",
"url":128,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2swg_transition",
"url":129,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2swg_transition.FWG2SWGTransition",
"url":129,
"doc":"Attributes: length: defaults to 20, Length of transition wire_only_length: defaults to 5.0, Length of transition where shallow part is built up deep_only_width: defaults to 3.0, Core width of the waveguide at the end of shallow transition part fwg_type: type of FWG waveguide swg_type: type of SWG waveguide anchor: defaults to  Anchor.START , origin of the straight(START at origin, CENTER at origin or End at origin) port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() transition = FWG2SWGTransition(name=\"a\", length=20, fwg_type=TECH.WG.FWG.C.WIRE, swg_type=TECH.WG.SWG.C.WIRE) fp.plot(transition)   ![FWG2SWGTransition](images/fwg2swg_transition.png)"
},
{
"ref":"gpdk.components.transition.fwg2swg_transition.FWG2SWGTransition.length",
"url":129,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2swg_transition.FWG2SWGTransition.wire_only_length",
"url":129,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2swg_transition.FWG2SWGTransition.deep_only_width",
"url":129,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2swg_transition.FWG2SWGTransition.fwg_type",
"url":129,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2swg_transition.FWG2SWGTransition.swg_type",
"url":129,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2swg_transition.FWG2SWGTransition.anchor",
"url":129,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2swg_transition.FWG2SWGTransition.port_names",
"url":129,
"doc":""
},
{
"ref":"gpdk.components.transition.fwg2swg_transition.FWG2SWGTransition.build",
"url":129,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.transition.fwg2swg_transition.FWG2SWGTransition.raw_curve",
"url":129,
"doc":""
},
{
"ref":"gpdk.components.transition.swg2mwg_transition",
"url":130,
"doc":""
},
{
"ref":"gpdk.components.transition.swg2mwg_transition.SWG2MWGTransition",
"url":130,
"doc":"Attributes: swg_length: defaults to 20, Length of transition swg_wire_only_length: defaults to 5.0, Length of transition where shallow part is built up swg_deep_only_width: defaults to 3.0, Core width of the waveguide at the end of shallow transition part swg_type: type of SWG waveguide mwg_length: defaults to 20, Length of transition mwg_wire_only_length: defaults to 5.0, Length of transition where shallow part is built up mwg_deep_only_width: defaults to 3.0, Core width of the waveguide at the end of shallow transition part mwg_type: type of MWG waveguide anchor: defaults to  Anchor.START , origin of the straight(START at origin, CENTER at origin or End at origin) port_names: defaults to [\"op_0\", \"op_1\"] Examples:   TECH = get_technology() transition = SWG2MWGTransition(name=\"a\", swg_type=TECH.WG.SWG.C.WIRE, mwg_type=TECH.WG.MWG.C.WIRE) fp.plot(transition)   ![SWG2MWGTransition](images/swg2mwg_transition.png)"
},
{
"ref":"gpdk.components.transition.swg2mwg_transition.SWG2MWGTransition.swg_length",
"url":130,
"doc":""
},
{
"ref":"gpdk.components.transition.swg2mwg_transition.SWG2MWGTransition.swg_wire_only_length",
"url":130,
"doc":""
},
{
"ref":"gpdk.components.transition.swg2mwg_transition.SWG2MWGTransition.swg_deep_only_width",
"url":130,
"doc":""
},
{
"ref":"gpdk.components.transition.swg2mwg_transition.SWG2MWGTransition.swg_type",
"url":130,
"doc":""
},
{
"ref":"gpdk.components.transition.swg2mwg_transition.SWG2MWGTransition.mwg_length",
"url":130,
"doc":""
},
{
"ref":"gpdk.components.transition.swg2mwg_transition.SWG2MWGTransition.mwg_wire_only_length",
"url":130,
"doc":""
},
{
"ref":"gpdk.components.transition.swg2mwg_transition.SWG2MWGTransition.mwg_deep_only_width",
"url":130,
"doc":""
},
{
"ref":"gpdk.components.transition.swg2mwg_transition.SWG2MWGTransition.mwg_type",
"url":130,
"doc":""
},
{
"ref":"gpdk.components.transition.swg2mwg_transition.SWG2MWGTransition.anchor",
"url":130,
"doc":""
},
{
"ref":"gpdk.components.transition.swg2mwg_transition.SWG2MWGTransition.port_names",
"url":130,
"doc":""
},
{
"ref":"gpdk.components.transition.swg2mwg_transition.SWG2MWGTransition.build",
"url":130,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.transition.swg2mwg_transition.SWG2MWGTransition.raw_curve",
"url":130,
"doc":""
},
{
"ref":"gpdk.components.transition.test",
"url":131,
"doc":""
},
{
"ref":"gpdk.components.transition.test.test_fwg2mwg_transition",
"url":132,
"doc":""
},
{
"ref":"gpdk.components.transition.test.test_fwg2mwg_transition.test_fwg2mwg_transition",
"url":132,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.transition.test.test_fwg2swg_transition",
"url":133,
"doc":""
},
{
"ref":"gpdk.components.transition.test.test_fwg2swg_transition.test_fwg2swg_transition",
"url":133,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.transition.test.test_swg2mwg_transition",
"url":134,
"doc":""
},
{
"ref":"gpdk.components.transition.test.test_swg2mwg_transition.test_swg2mwg_transition",
"url":134,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.via",
"url":135,
"doc":""
},
{
"ref":"gpdk.components.via.test",
"url":136,
"doc":""
},
{
"ref":"gpdk.components.via.test.test_via",
"url":137,
"doc":""
},
{
"ref":"gpdk.components.via.test.test_via.test_via",
"url":137,
"doc":"",
"func":1
},
{
"ref":"gpdk.components.via.via",
"url":138,
"doc":""
},
{
"ref":"gpdk.components.via.via.Via",
"url":138,
"doc":"Attributes: top_layer: defaults to  LAYER.MT_DRW , top layer via_layer: defaults to  LAYER.VIA2_DRW , via layer bottom_layer: defaults to  LAYER.M2_DRW , bottom layer top_shape: defaults to  VIAS.TOP_SHAPE , top shape via_shape: defaults to  VIAS.VIA_SHAPE , via shape bottom_shape: defaults to  VIAS.BOTTOM_SHAPE , bottom shape port_names: defaults to [\"ep_0\", \"ep_1\"] Examples:   via = Via() fp.plot(via)   ![Via](images/via.png)"
},
{
"ref":"gpdk.components.via.via.Via.top_layer",
"url":138,
"doc":""
},
{
"ref":"gpdk.components.via.via.Via.via_layer",
"url":138,
"doc":""
},
{
"ref":"gpdk.components.via.via.Via.bottom_layer",
"url":138,
"doc":""
},
{
"ref":"gpdk.components.via.via.Via.top_shape",
"url":138,
"doc":""
},
{
"ref":"gpdk.components.via.via.Via.via_shape",
"url":138,
"doc":""
},
{
"ref":"gpdk.components.via.via.Via.bottom_shape",
"url":138,
"doc":""
},
{
"ref":"gpdk.components.via.via.Via.port_names",
"url":138,
"doc":""
},
{
"ref":"gpdk.components.via.via.Via.build",
"url":138,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.components.via.vias",
"url":139,
"doc":""
},
{
"ref":"gpdk.components.via.vias.Vias",
"url":139,
"doc":"Attributes: width: width of array of via height: height of array of via spacing: spacing between vias in array top_layer: defaults to  LAYER.MT_DRW , top layer via_layer: defaults to  LAYER.VIA2_DRW , via layer bottom_layer: defaults to  LAYER.M2_DRW , bottom layer port_names: defaults to [\"ep_0\", \"ep_1\"] Examples:   vias = Vias(name=\"s\", width=4.3, height=4.3) fp.plot(vias)   ![Vias](images/vias.png)"
},
{
"ref":"gpdk.components.via.vias.Vias.width",
"url":139,
"doc":""
},
{
"ref":"gpdk.components.via.vias.Vias.height",
"url":139,
"doc":""
},
{
"ref":"gpdk.components.via.vias.Vias.spacing",
"url":139,
"doc":""
},
{
"ref":"gpdk.components.via.vias.Vias.top_layer",
"url":139,
"doc":""
},
{
"ref":"gpdk.components.via.vias.Vias.via_layer",
"url":139,
"doc":""
},
{
"ref":"gpdk.components.via.vias.Vias.bottom_layer",
"url":139,
"doc":""
},
{
"ref":"gpdk.components.via.vias.Vias.via",
"url":139,
"doc":""
},
{
"ref":"gpdk.components.via.vias.Vias.port_names",
"url":139,
"doc":""
},
{
"ref":"gpdk.components.via.vias.Vias.build",
"url":139,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples",
"url":140,
"doc":""
},
{
"ref":"gpdk.examples.example_array_mzi",
"url":141,
"doc":""
},
{
"ref":"gpdk.examples.example_array_mzi.Linked",
"url":141,
"doc":"Linked( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_array_mzi.Linked.name",
"url":141,
"doc":""
},
{
"ref":"gpdk.examples.example_array_mzi.Linked.bands",
"url":141,
"doc":""
},
{
"ref":"gpdk.examples.example_array_mzi.Linked.patches",
"url":141,
"doc":""
},
{
"ref":"gpdk.examples.example_array_mzi.Linked.port_names",
"url":141,
"doc":""
},
{
"ref":"gpdk.examples.example_array_mzi.Linked.transform",
"url":141,
"doc":""
},
{
"ref":"gpdk.examples.example_array_mzi.Linked.build",
"url":141,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_connected",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01",
"url":142,
"doc":"Circuit01( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_connected.Circuit01.gc_spacing",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.ring_radius",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.bend_degrees",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.swg_spacing",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.swg_length",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.fwg_type",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.swg_type",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.mwg_type",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.transform",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.dc_0",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.dc_1",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.gc_0",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.gc_1",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.gc_2",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.gc_3",
"url":142,
"doc":""
},
{
"ref":"gpdk.examples.example_connected.Circuit01.build",
"url":142,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_connected_and_linked",
"url":143,
"doc":""
},
{
"ref":"gpdk.examples.example_connected_and_linked.ExampleJointsLinked",
"url":143,
"doc":"ExampleJointsLinked( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_connected_and_linked.ExampleJointsLinked.dist",
"url":143,
"doc":""
},
{
"ref":"gpdk.examples.example_connected_and_linked.ExampleJointsLinked.build",
"url":143,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_cosine_bend",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.Cosine",
"url":144,
"doc":"Cosine( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_cosine_bend.Cosine.radius_eff",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.Cosine.radius_min",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.Cosine.degrees",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.Cosine.radians",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.Cosine.p",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.Cosine.l_max",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.Cosine.transform",
"url":144,
"doc":":param degrees central angle in degrees :param radius_min radius minimum :param radius_eff radius effective choose either radius_min(imum) or radius_eff(ective) :param p radio of euler spiral in whole bend, 0 < p <= 1, when p = 1, there's no cirular part in the bend :param l_max max length of euler spiral in half bend choose either p or l_max"
},
{
"ref":"gpdk.examples.example_cosine_bend.Cosine.p_from_l_max",
"url":144,
"doc":"",
"func":1
},
{
"ref":"gpdk.examples.example_cosine_bend.Cosine.curve_function",
"url":144,
"doc":"",
"func":1
},
{
"ref":"gpdk.examples.example_cosine_bend.BendCosine",
"url":144,
"doc":"BendCosine( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_cosine_bend.BendCosine.radius_eff",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.BendCosine.degrees",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.BendCosine.radius_min",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.BendCosine.p",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.BendCosine.l_max",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.BendCosine.waveguide_type",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.BendCosine.port_names",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.BendCosine.raw_curve",
"url":144,
"doc":""
},
{
"ref":"gpdk.examples.example_cosine_bend.BendCosine.build",
"url":144,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_curve_length",
"url":145,
"doc":""
},
{
"ref":"gpdk.examples.example_curve_length.CurveLength",
"url":145,
"doc":"CurveLength( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_curve_length.CurveLength.name",
"url":145,
"doc":""
},
{
"ref":"gpdk.examples.example_curve_length.CurveLength.bands",
"url":145,
"doc":""
},
{
"ref":"gpdk.examples.example_curve_length.CurveLength.patches",
"url":145,
"doc":""
},
{
"ref":"gpdk.examples.example_curve_length.CurveLength.port_names",
"url":145,
"doc":""
},
{
"ref":"gpdk.examples.example_curve_length.CurveLength.transform",
"url":145,
"doc":""
},
{
"ref":"gpdk.examples.example_curve_length.CurveLength.build",
"url":145,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_demultiplexer",
"url":146,
"doc":""
},
{
"ref":"gpdk.examples.example_demultiplexer.Demultiplexer",
"url":146,
"doc":"Demultiplexer( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_demultiplexer.Demultiplexer.name",
"url":146,
"doc":""
},
{
"ref":"gpdk.examples.example_demultiplexer.Demultiplexer.bands",
"url":146,
"doc":""
},
{
"ref":"gpdk.examples.example_demultiplexer.Demultiplexer.patches",
"url":146,
"doc":""
},
{
"ref":"gpdk.examples.example_demultiplexer.Demultiplexer.port_names",
"url":146,
"doc":""
},
{
"ref":"gpdk.examples.example_demultiplexer.Demultiplexer.transform",
"url":146,
"doc":""
},
{
"ref":"gpdk.examples.example_demultiplexer.Demultiplexer.build",
"url":146,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_demultiplexer2",
"url":147,
"doc":""
},
{
"ref":"gpdk.examples.example_demultiplexer2.Demultiplexer2",
"url":147,
"doc":"Demultiplexer2( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_demultiplexer2.Demultiplexer2.name",
"url":147,
"doc":""
},
{
"ref":"gpdk.examples.example_demultiplexer2.Demultiplexer2.bands",
"url":147,
"doc":""
},
{
"ref":"gpdk.examples.example_demultiplexer2.Demultiplexer2.patches",
"url":147,
"doc":""
},
{
"ref":"gpdk.examples.example_demultiplexer2.Demultiplexer2.port_names",
"url":147,
"doc":""
},
{
"ref":"gpdk.examples.example_demultiplexer2.Demultiplexer2.transform",
"url":147,
"doc":""
},
{
"ref":"gpdk.examples.example_demultiplexer2.Demultiplexer2.build",
"url":147,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_elliptical_rings",
"url":148,
"doc":""
},
{
"ref":"gpdk.examples.example_elliptical_rings.EllipticalRings",
"url":148,
"doc":"EllipticalRings( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_elliptical_rings.EllipticalRings.name",
"url":148,
"doc":""
},
{
"ref":"gpdk.examples.example_elliptical_rings.EllipticalRings.bands",
"url":148,
"doc":""
},
{
"ref":"gpdk.examples.example_elliptical_rings.EllipticalRings.patches",
"url":148,
"doc":""
},
{
"ref":"gpdk.examples.example_elliptical_rings.EllipticalRings.port_names",
"url":148,
"doc":""
},
{
"ref":"gpdk.examples.example_elliptical_rings.EllipticalRings.transform",
"url":148,
"doc":""
},
{
"ref":"gpdk.examples.example_elliptical_rings.EllipticalRings.build",
"url":148,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_export_gds_layer_mapper",
"url":149,
"doc":""
},
{
"ref":"gpdk.examples.example_export_gds_layer_mapper.Rects",
"url":149,
"doc":"Rects( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_export_gds_layer_mapper.Rects.name",
"url":149,
"doc":""
},
{
"ref":"gpdk.examples.example_export_gds_layer_mapper.Rects.bands",
"url":149,
"doc":""
},
{
"ref":"gpdk.examples.example_export_gds_layer_mapper.Rects.patches",
"url":149,
"doc":""
},
{
"ref":"gpdk.examples.example_export_gds_layer_mapper.Rects.port_names",
"url":149,
"doc":""
},
{
"ref":"gpdk.examples.example_export_gds_layer_mapper.Rects.transform",
"url":149,
"doc":""
},
{
"ref":"gpdk.examples.example_export_gds_layer_mapper.Rects.build",
"url":149,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_extension_profile",
"url":150,
"doc":""
},
{
"ref":"gpdk.examples.example_flatten",
"url":151,
"doc":""
},
{
"ref":"gpdk.examples.example_fonts",
"url":152,
"doc":""
},
{
"ref":"gpdk.examples.example_hidden_port",
"url":153,
"doc":""
},
{
"ref":"gpdk.examples.example_hierarchical",
"url":154,
"doc":""
},
{
"ref":"gpdk.examples.example_hierarchical.FourBends",
"url":154,
"doc":"FourBends( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_hierarchical.FourBends.straight_length",
"url":154,
"doc":""
},
{
"ref":"gpdk.examples.example_hierarchical.FourBends.bend_pcell",
"url":154,
"doc":""
},
{
"ref":"gpdk.examples.example_hierarchical.FourBends.waveguide_type",
"url":154,
"doc":""
},
{
"ref":"gpdk.examples.example_hierarchical.FourBends.port_names",
"url":154,
"doc":""
},
{
"ref":"gpdk.examples.example_hierarchical.FourBends.build",
"url":154,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_linked",
"url":155,
"doc":""
},
{
"ref":"gpdk.examples.example_linked.Linked",
"url":155,
"doc":"Linked( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_linked.Linked.name",
"url":155,
"doc":""
},
{
"ref":"gpdk.examples.example_linked.Linked.bands",
"url":155,
"doc":""
},
{
"ref":"gpdk.examples.example_linked.Linked.patches",
"url":155,
"doc":""
},
{
"ref":"gpdk.examples.example_linked.Linked.port_names",
"url":155,
"doc":""
},
{
"ref":"gpdk.examples.example_linked.Linked.transform",
"url":155,
"doc":""
},
{
"ref":"gpdk.examples.example_linked.Linked.build",
"url":155,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_linked_elec",
"url":156,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec.LinkedElec",
"url":156,
"doc":"LinkedElec( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_linked_elec.LinkedElec.name",
"url":156,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec.LinkedElec.bands",
"url":156,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec.LinkedElec.patches",
"url":156,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec.LinkedElec.port_names",
"url":156,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec.LinkedElec.transform",
"url":156,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec.LinkedElec.build",
"url":156,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_linked_elec2",
"url":157,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec2.CircularBendFactory",
"url":157,
"doc":"CircularBendFactory(radius: float = 80)"
},
{
"ref":"gpdk.examples.example_linked_elec2.CircularBendFactory.radius",
"url":157,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec2.LinkedElec2",
"url":157,
"doc":"LinkedElec2( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_linked_elec2.LinkedElec2.name",
"url":157,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec2.LinkedElec2.bands",
"url":157,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec2.LinkedElec2.patches",
"url":157,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec2.LinkedElec2.port_names",
"url":157,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec2.LinkedElec2.transform",
"url":157,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec2.LinkedElec2.build",
"url":157,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_linked_elec_layers",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.MT2",
"url":158,
"doc":"MT2( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_linked_elec_layers.MT2.line_width",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.MT2.port_names",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.MT2.max_width",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.MT2.spacing",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.MT2.metal_stack",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.MT2.profile",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.MT2.W10",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.MT2.W20",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.MT2.W40",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.MT2.W80",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.CircularBendFactory",
"url":158,
"doc":"CircularBendFactory(radius: float = 80)"
},
{
"ref":"gpdk.examples.example_linked_elec_layers.CircularBendFactory.radius",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.LinkedElec",
"url":158,
"doc":"LinkedElec( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_linked_elec_layers.LinkedElec.name",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.LinkedElec.bands",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.LinkedElec.patches",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.LinkedElec.port_names",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.LinkedElec.transform",
"url":158,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_elec_layers.LinkedElec.build",
"url":158,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_linked_manual",
"url":159,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_manual.EulerBendFactory",
"url":159,
"doc":"EulerBendFactory(radius_min: float, l_max: Union[float, NoneType] = None)"
},
{
"ref":"gpdk.examples.example_linked_manual.EulerBendFactory.radius_min",
"url":159,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_manual.EulerBendFactory.l_max",
"url":159,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_manual.LinkedGratingCoupler",
"url":159,
"doc":"LinkedGratingCoupler( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_linked_manual.LinkedGratingCoupler.waveguide_type",
"url":159,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_manual.LinkedGratingCoupler.gc_pcell",
"url":159,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_manual.LinkedGratingCoupler.points",
"url":159,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_manual.LinkedGratingCoupler.build",
"url":159,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_linked_splitter",
"url":160,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_splitter.LinkedSplitter",
"url":160,
"doc":"LinkedSplitter( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_linked_splitter.LinkedSplitter.name",
"url":160,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_splitter.LinkedSplitter.bands",
"url":160,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_splitter.LinkedSplitter.patches",
"url":160,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_splitter.LinkedSplitter.port_names",
"url":160,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_splitter.LinkedSplitter.transform",
"url":160,
"doc":""
},
{
"ref":"gpdk.examples.example_linked_splitter.LinkedSplitter.build",
"url":160,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_linker",
"url":161,
"doc":""
},
{
"ref":"gpdk.examples.example_linker.LinkBetweenInLinked",
"url":161,
"doc":"LinkBetweenInLinked( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_linker.LinkBetweenInLinked.name",
"url":161,
"doc":""
},
{
"ref":"gpdk.examples.example_linker.LinkBetweenInLinked.bands",
"url":161,
"doc":""
},
{
"ref":"gpdk.examples.example_linker.LinkBetweenInLinked.patches",
"url":161,
"doc":""
},
{
"ref":"gpdk.examples.example_linker.LinkBetweenInLinked.port_names",
"url":161,
"doc":""
},
{
"ref":"gpdk.examples.example_linker.LinkBetweenInLinked.transform",
"url":161,
"doc":""
},
{
"ref":"gpdk.examples.example_linker.LinkBetweenInLinked.build",
"url":161,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_link_between_flyline",
"url":162,
"doc":""
},
{
"ref":"gpdk.examples.example_link_smooth",
"url":163,
"doc":""
},
{
"ref":"gpdk.examples.example_merged",
"url":164,
"doc":""
},
{
"ref":"gpdk.examples.example_merged.PolygonBooleanOps",
"url":164,
"doc":"PolygonBooleanOps( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_merged.PolygonBooleanOps.name",
"url":164,
"doc":""
},
{
"ref":"gpdk.examples.example_merged.PolygonBooleanOps.bands",
"url":164,
"doc":""
},
{
"ref":"gpdk.examples.example_merged.PolygonBooleanOps.patches",
"url":164,
"doc":""
},
{
"ref":"gpdk.examples.example_merged.PolygonBooleanOps.port_names",
"url":164,
"doc":""
},
{
"ref":"gpdk.examples.example_merged.PolygonBooleanOps.transform",
"url":164,
"doc":""
},
{
"ref":"gpdk.examples.example_merged.PolygonBooleanOps.build",
"url":164,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_mzi_perf",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.BendCosine",
"url":165,
"doc":"BendCosine( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_mzi_perf.BendCosine.degrees",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.BendCosine.radius_eff",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.BendCosine.radius_min",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.BendCosine.p",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.BendCosine.l_max",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.BendCosine.waveguide_type",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.BendCosine.port_names",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.BendCosine.raw_curve",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.BendCosine.build",
"url":165,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_mzi_perf.CosineBendFactory",
"url":165,
"doc":"CosineBendFactory( args,  kwds)"
},
{
"ref":"gpdk.examples.example_mzi_perf.CosineBendFactory.radius_min",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.CosineBendFactory.l_max",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.CosineBendFactory.waveguide_type",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.LinkBetweenBase",
"url":165,
"doc":"LinkBetweenBase( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_mzi_perf.LinkBetweenBase.start",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.LinkBetweenBase.end",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.LinkBetweenBase.waypoints",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.LinkBetweenBase.link_type",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.LinkBetweenBase.bend_factory",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.LinkBetweenBase.generated_link",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.LinkBetweenBase.build",
"url":165,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_mzi_perf.LinkBetweenBase.curve_length",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.LinkBetweenBase.with_environment",
"url":165,
"doc":"",
"func":1
},
{
"ref":"gpdk.examples.example_mzi_perf.Linker",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.Linker.FWG_WIRE_CIRCULAR_WIRE",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.Linker.FWG_EXPANDED_EULER_WIRE",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.Linker.SWG_EXPANDED_COSINE_EXPANDED",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.Mzi",
"url":165,
"doc":"Mzi( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_mzi_perf.Mzi.dc1",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.Mzi.dc2",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.Mzi.ps",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.Mzi.ps_offset",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.Mzi.wg",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.Mzi.wg_offset",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.Mzi.dc_distance",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.Mzi.build",
"url":165,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_mzi_perf.MziArray",
"url":165,
"doc":"MziArray( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_mzi_perf.MziArray.mzis",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.MziArray.rows",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.MziArray.cols",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.MziArray.period_x",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.MziArray.period_y",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.MziArray.offsets",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.MziArray.linkers",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.MziArray.waypoints_candidates",
"url":165,
"doc":""
},
{
"ref":"gpdk.examples.example_mzi_perf.MziArray.build",
"url":165,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_pcell_dataclass",
"url":166,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass.RingResonator",
"url":166,
"doc":"RingResonator( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_pcell_dataclass.RingResonator.ring_radius",
"url":166,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass.RingResonator.top_spacing",
"url":166,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass.RingResonator.bottom_spacing",
"url":166,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass.RingResonator.ring_type",
"url":166,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass.RingResonator.top_type",
"url":166,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass.RingResonator.bottom_type",
"url":166,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass.RingResonator.port_names",
"url":166,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass.RingResonator.build",
"url":166,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_pcell_dataclass.RingResonator2",
"url":166,
"doc":"RingResonator2( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_pcell_dataclass.RingResonator2.computed_value",
"url":166,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass.RingResonator2.ring_radius",
"url":166,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass.RingResonator2.computed_v2",
"url":166,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass.RingResonator2.build",
"url":166,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_pcell_dataclass_oversimplified",
"url":167,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_oversimplified.BendCircular",
"url":167,
"doc":"BendCircular( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_pcell_dataclass_oversimplified.BendCircular.degrees",
"url":167,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_oversimplified.BendCircular.radius",
"url":167,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_oversimplified.BendCircular.waveguide_type",
"url":167,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_oversimplified.BendCircular.port_names",
"url":167,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_oversimplified.BendCircular.raw_curve",
"url":167,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_oversimplified.BendCircular.build",
"url":167,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_pcell_dataclass_oversimplified.BendCircular90",
"url":167,
"doc":"BendCircular90( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_pcell_dataclass_oversimplified.BendCircular90.degrees",
"url":167,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_oversimplified.BendCircular90.build",
"url":167,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final",
"url":168,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator",
"url":168,
"doc":"RingResonator( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator.ring_radius",
"url":168,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator.top_spacing",
"url":168,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator.bottom_spacing",
"url":168,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator.ring_type",
"url":168,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator.top_type",
"url":168,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator.bottom_type",
"url":168,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator.port_names",
"url":168,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator.build",
"url":168,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator2",
"url":168,
"doc":"RingResonator2( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator2.computed_value",
"url":168,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator2.ring_radius",
"url":168,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator2.computed_v2",
"url":168,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator2.build",
"url":168,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator3",
"url":168,
"doc":"RingResonator3( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator3.computed_value",
"url":168,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator3.computed_v2",
"url":168,
"doc":""
},
{
"ref":"gpdk.examples.example_pcell_dataclass_with_final.RingResonator3.build",
"url":168,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_phase_shifter",
"url":169,
"doc":""
},
{
"ref":"gpdk.examples.example_phase_shifter.PnPhaseShifterTemplate",
"url":169,
"doc":"PnPhaseShifterTemplate(waveguide_type: gpdk.technology.interfaces.wg.CoreCladdingWaveguideType = None)"
},
{
"ref":"gpdk.examples.example_phase_shifter.PnPhaseShifterTemplate.waveguide_type",
"url":169,
"doc":""
},
{
"ref":"gpdk.examples.example_phase_shifter.PnPhaseShifterTemplate.curve_paint",
"url":169,
"doc":""
},
{
"ref":"gpdk.examples.example_port_transform",
"url":170,
"doc":""
},
{
"ref":"gpdk.examples.example_port_transform.PortTransform",
"url":170,
"doc":"PortTransform( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_port_transform.PortTransform.name",
"url":170,
"doc":""
},
{
"ref":"gpdk.examples.example_port_transform.PortTransform.bands",
"url":170,
"doc":""
},
{
"ref":"gpdk.examples.example_port_transform.PortTransform.patches",
"url":170,
"doc":""
},
{
"ref":"gpdk.examples.example_port_transform.PortTransform.port_names",
"url":170,
"doc":""
},
{
"ref":"gpdk.examples.example_port_transform.PortTransform.transform",
"url":170,
"doc":""
},
{
"ref":"gpdk.examples.example_port_transform.PortTransform.build",
"url":170,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_q_mod_tx",
"url":171,
"doc":""
},
{
"ref":"gpdk.examples.example_ringMod_transceiver",
"url":172,
"doc":""
},
{
"ref":"gpdk.examples.example_ringMod_transceiver.Transceiver",
"url":172,
"doc":"Transceiver( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_ringMod_transceiver.Transceiver.name",
"url":172,
"doc":""
},
{
"ref":"gpdk.examples.example_ringMod_transceiver.Transceiver.bands",
"url":172,
"doc":""
},
{
"ref":"gpdk.examples.example_ringMod_transceiver.Transceiver.patches",
"url":172,
"doc":""
},
{
"ref":"gpdk.examples.example_ringMod_transceiver.Transceiver.port_names",
"url":172,
"doc":""
},
{
"ref":"gpdk.examples.example_ringMod_transceiver.Transceiver.transform",
"url":172,
"doc":""
},
{
"ref":"gpdk.examples.example_ringMod_transceiver.Transceiver.build",
"url":172,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_sampler_periodic",
"url":173,
"doc":""
},
{
"ref":"gpdk.examples.example_scancodes",
"url":174,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_01",
"url":175,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_01.Circuit01_double_bus_ring_resonator",
"url":175,
"doc":"Circuit01_double_bus_ring_resonator( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_sdl_circuit_01.Circuit01_double_bus_ring_resonator.instance_naming_table",
"url":175,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_01.Circuit01_double_bus_ring_resonator.dist",
"url":175,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_01.Circuit01_double_bus_ring_resonator.build",
"url":175,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_sdl_circuit_02",
"url":176,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_02.Circuit02_ring_loaded_mzi",
"url":176,
"doc":"Circuit02_ring_loaded_mzi( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_sdl_circuit_02.Circuit02_ring_loaded_mzi.name",
"url":176,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_02.Circuit02_ring_loaded_mzi.bands",
"url":176,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_02.Circuit02_ring_loaded_mzi.patches",
"url":176,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_02.Circuit02_ring_loaded_mzi.port_names",
"url":176,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_02.Circuit02_ring_loaded_mzi.transform",
"url":176,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_02.Circuit02_ring_loaded_mzi.build",
"url":176,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_sdl_circuit_03",
"url":177,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_03.Circuit03_passive_demux",
"url":177,
"doc":"Circuit03_passive_demux( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_sdl_circuit_03.Circuit03_passive_demux.name",
"url":177,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_03.Circuit03_passive_demux.bands",
"url":177,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_03.Circuit03_passive_demux.patches",
"url":177,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_03.Circuit03_passive_demux.port_names",
"url":177,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_03.Circuit03_passive_demux.transform",
"url":177,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_03.Circuit03_passive_demux.build",
"url":177,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_sdl_circuit_04",
"url":178,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_04.Circuit04",
"url":178,
"doc":"Circuit04( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_sdl_circuit_04.Circuit04.dist",
"url":178,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_04.Circuit04.build",
"url":178,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_sdl_circuit_05",
"url":179,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_05.Circuit05_mzm",
"url":179,
"doc":"Circuit05_mzm( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_sdl_circuit_05.Circuit05_mzm.name",
"url":179,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_05.Circuit05_mzm.bands",
"url":179,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_05.Circuit05_mzm.patches",
"url":179,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_05.Circuit05_mzm.port_names",
"url":179,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_05.Circuit05_mzm.transform",
"url":179,
"doc":""
},
{
"ref":"gpdk.examples.example_sdl_circuit_05.Circuit05_mzm.build",
"url":179,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_slot_waveguide",
"url":180,
"doc":""
},
{
"ref":"gpdk.examples.example_svrf",
"url":181,
"doc":""
},
{
"ref":"gpdk.examples.example_swgr_waveguide",
"url":182,
"doc":""
},
{
"ref":"gpdk.examples.example_transform",
"url":183,
"doc":""
},
{
"ref":"gpdk.examples.example_transform.Transform",
"url":183,
"doc":"Transform( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.examples.example_transform.Transform.name",
"url":183,
"doc":""
},
{
"ref":"gpdk.examples.example_transform.Transform.bands",
"url":183,
"doc":""
},
{
"ref":"gpdk.examples.example_transform.Transform.patches",
"url":183,
"doc":""
},
{
"ref":"gpdk.examples.example_transform.Transform.port_names",
"url":183,
"doc":""
},
{
"ref":"gpdk.examples.example_transform.Transform.transform",
"url":183,
"doc":""
},
{
"ref":"gpdk.examples.example_transform.Transform.build",
"url":183,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.examples.example_waveguide_offset",
"url":184,
"doc":""
},
{
"ref":"gpdk.geometry",
"url":185,
"doc":""
},
{
"ref":"gpdk.geometry.sampler_periodic",
"url":186,
"doc":""
},
{
"ref":"gpdk.geometry.sampler_periodic.SamplerPeriodic",
"url":186,
"doc":"SamplerPeriodic(period: float, reserved_ends: Tuple[float, float] = (0, 0 "
},
{
"ref":"gpdk.geometry.sampler_periodic.SamplerPeriodic.period",
"url":186,
"doc":""
},
{
"ref":"gpdk.geometry.sampler_periodic.SamplerPeriodic.reserved_ends",
"url":186,
"doc":""
},
{
"ref":"gpdk.lyp",
"url":187,
"doc":""
},
{
"ref":"gpdk.lyp.main",
"url":187,
"doc":"",
"func":1
},
{
"ref":"gpdk.routing",
"url":188,
"doc":""
},
{
"ref":"gpdk.routing.all",
"url":189,
"doc":""
},
{
"ref":"gpdk.routing.auto_transitioned",
"url":190,
"doc":""
},
{
"ref":"gpdk.routing.auto_transitioned.auto_transitioned",
"url":191,
"doc":""
},
{
"ref":"gpdk.routing.auto_transitioned.auto_transitioned.AutoTransitioned",
"url":191,
"doc":"Attributes: device: device whose ports need to be auto-transitioned waveguide_type: dict with port name as key, waveguide type as value, \" \" means every other port Examples:   TECH = get_technology() device = AutoTransitioned(device=Mmi(waveguide_type=TECH.WG.FWG.C.WIRE), waveguide_types={\" \": WG.SWG.C.WIRE}) fp.plot(device)   ![AutoTransitioned](images/auto_transitioned.png)"
},
{
"ref":"gpdk.routing.auto_transitioned.auto_transitioned.AutoTransitioned.device",
"url":191,
"doc":""
},
{
"ref":"gpdk.routing.auto_transitioned.auto_transitioned.AutoTransitioned.waveguide_types",
"url":191,
"doc":""
},
{
"ref":"gpdk.routing.auto_transitioned.auto_transitioned.AutoTransitioned.build",
"url":191,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.routing.auto_transitioned.test",
"url":192,
"doc":""
},
{
"ref":"gpdk.routing.auto_transitioned.test.test_auto_transitioned",
"url":193,
"doc":""
},
{
"ref":"gpdk.routing.auto_transitioned.test.test_auto_transitioned.test_auto_transitioned",
"url":193,
"doc":"",
"func":1
},
{
"ref":"gpdk.routing.comp_scan",
"url":194,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.DeviceAdapter",
"url":195,
"doc":"Base class for protocol classes. Protocol classes are defined as class Proto(Protocol): def meth(self) -> int:  . Such classes are primarily used with static type checkers that recognize structural subtyping (static duck-typing), for example class C: def meth(self) -> int: return 0 def func(x: Proto) -> int: return x.meth() func(C(  Passes static type check See PEP 544 for details. Protocol classes decorated with @typing.runtime_checkable act as simple-minded runtime protocols that check only the presence of given attributes, ignoring their type signatures. Protocol classes can be generic, they are defined as class GenProto(Protocol[T]): def meth(self) -> T:  ."
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.FiberCouplerFactory",
"url":195,
"doc":"Base class for protocol classes. Protocol classes are defined as class Proto(Protocol): def meth(self) -> int:  . Such classes are primarily used with static type checkers that recognize structural subtyping (static duck-typing), for example class C: def meth(self) -> int: return 0 def func(x: Proto) -> int: return x.meth() func(C(  Passes static type check See PEP 544 for details. Protocol classes decorated with @typing.runtime_checkable act as simple-minded runtime protocols that check only the presence of given attributes, ignoring their type signatures. Protocol classes can be generic, they are defined as class GenProto(Protocol[T]): def meth(self) -> T:  ."
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.ConstFiberCouplerFactory",
"url":195,
"doc":"Base class for protocol classes. Protocol classes are defined as class Proto(Protocol): def meth(self) -> int:  . Such classes are primarily used with static type checkers that recognize structural subtyping (static duck-typing), for example class C: def meth(self) -> int: return 0 def func(x: Proto) -> int: return x.meth() func(C(  Passes static type check See PEP 544 for details. Protocol classes decorated with @typing.runtime_checkable act as simple-minded runtime protocols that check only the presence of given attributes, ignoring their type signatures. Protocol classes can be generic, they are defined as class GenProto(Protocol[T]): def meth(self) -> T:  ."
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.Block",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.Alignment",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.Title",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.Blank",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan",
"url":195,
"doc":"Attributes: max_lines: Optional, max lines, raise error if exceeded blocks: blocks of devices width: defaults to 2000, total width between grating couplers spacing: defaults to 127, spacing between lines bend_degrees: defaults to 45, central angle of generated bend bend_factory: Optional, will be used to generate all bends if provided bend_factories: Optional, providing  IBendWaveguideFactory for each waveguide type waveguide_type: Optional, type of generated waveguide connection_type: Optional, type of generated connection straight device_connection_length: defaults to 20, minimum distance between device and sbend min_io_connection_length: defaults to 20, minimum distance between grating coupler and sbend Examples:   TECH = get_technology()   . device = CompScan(spacing=255, width=2000, blocks=blocks) fp.plot(device)   ![CompScan](images/comp_scan.png)"
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.fiber_coupler_factory",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.fiber_coupler_adapter",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.fiber_coupler_adapter_port",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.fiber_coupler_v_mirrored",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.max_lines",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.blocks",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.width",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.spacing",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.bend_degrees",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.bend_factory",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.bend_factories",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.waveguide_type",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.connection_type",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.device_connection_length",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.min_io_connection_length",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScan.build",
"url":195,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScanBuilder",
"url":195,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScanBuilder.build",
"url":195,
"doc":"",
"func":1
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScanBuilder.add_block",
"url":195,
"doc":"",
"func":1
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScanBuilder.add_alignment",
"url":195,
"doc":"",
"func":1
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScanBuilder.add_title",
"url":195,
"doc":"",
"func":1
},
{
"ref":"gpdk.routing.comp_scan.comp_scan.CompScanBuilder.add_blank",
"url":195,
"doc":"",
"func":1
},
{
"ref":"gpdk.routing.comp_scan.test",
"url":196,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.test.test_comp_scan",
"url":197,
"doc":""
},
{
"ref":"gpdk.routing.comp_scan.test.test_comp_scan.test_comp_scan",
"url":197,
"doc":"",
"func":1
},
{
"ref":"gpdk.routing.extended",
"url":198,
"doc":""
},
{
"ref":"gpdk.routing.extended.extended",
"url":199,
"doc":""
},
{
"ref":"gpdk.routing.extended.extended.Extended",
"url":199,
"doc":"Attributes: device: device whose ports need to be extended lengths: dict with port name as key, length as value, \" \" means every other port waveguide_type: type of generated waveguide Examples:   TECH = get_technology() device = Extended(device=Mmi(waveguide_type=TECH.WG.FWG.C.WIRE), lengths={\" \": 10, \"op_0\": 20, \"op_1\": 30}) fp.plot(device)   ![Extended](images/extended.png)"
},
{
"ref":"gpdk.routing.extended.extended.Extended.device",
"url":199,
"doc":""
},
{
"ref":"gpdk.routing.extended.extended.Extended.lengths",
"url":199,
"doc":""
},
{
"ref":"gpdk.routing.extended.extended.Extended.waveguide_type",
"url":199,
"doc":""
},
{
"ref":"gpdk.routing.extended.extended.Extended.build",
"url":199,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.routing.extended.test",
"url":200,
"doc":""
},
{
"ref":"gpdk.routing.extended.test.test_extended",
"url":201,
"doc":""
},
{
"ref":"gpdk.routing.extended.test.test_extended.test_extended",
"url":201,
"doc":"",
"func":1
},
{
"ref":"gpdk.routing.fanout",
"url":202,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout",
"url":203,
"doc":"Attributes: device: device whose ports need fanout left_spacing: spacing between left ports right_spacing: spacing between right ports bend_degrees: defaults to 30 degrees bend_factories: a callable which receives an  IWaveguideType and returns an  IBendWaveguideFactory device_left_ports: Optional, device left ports from top to bottom device_right_ports: Optional, device right ports from bottom to top left_distance: Optional right_distance: Optional left_ports: Optional, port options for left ports right_ports: Optional, port options for right ports left_waveguide_type: Optional, type of left waveguide right_waveguide_type: Optional, type of right waveguide connect_length: defaults to 10, distance between generated port and sbend Examples:   from gpdk.technology.bend_factory import EulerBendFactory def bend_factories(waveguide_type: fp.IWaveguideType): if waveguide_type  TECH.WG.FWG.C.WIRE: return EulerBendFactory(radius_min=15, l_max=15, waveguide_type=waveguide_type) return waveguide_type.bend_factory device = HFanout(device=Mmi(waveguide_type=TECH.WG.FWG.C.WIRE), left_spacing=120, right_spacing=120, left_distance=100, right_distance=100, bend_factories=bend_factories, left_waveguide_type=TECH.WG.SWG.C.WIRE, right_waveguide_type=TECH.WG.SWG.C.WIRE) fp.plot(device)   ![HFanout](images/h_fanout.png)"
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.device",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.left_spacing",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.right_spacing",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.bend_degrees",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.bend_factories",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.device_left_ports",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.device_right_ports",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.left_distance",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.right_distance",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.left_ports",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.right_ports",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.left_waveguide_type",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.right_waveguide_type",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.connect_length",
"url":203,
"doc":""
},
{
"ref":"gpdk.routing.fanout.h_fanout.HFanout.build",
"url":203,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.routing.fanout.test",
"url":204,
"doc":""
},
{
"ref":"gpdk.routing.fanout.test.test_h_fanout",
"url":205,
"doc":""
},
{
"ref":"gpdk.routing.fanout.test.test_h_fanout.test_h_fanout",
"url":205,
"doc":"",
"func":1
},
{
"ref":"gpdk.routing.horizontalized",
"url":206,
"doc":""
},
{
"ref":"gpdk.routing.horizontalized.horizontalized",
"url":207,
"doc":""
},
{
"ref":"gpdk.routing.horizontalized.horizontalized.Horizontalized",
"url":207,
"doc":"Attributes: device: device whose ports need to be horizontalized bend_factory: Optional, bend waveguide factory straight_type: Optional, type of final short straight straight_length: defaults to 0.1, length of final short straight Examples:   TECH = get_technology() device = Horizontalized(device=BendCircular(radius=30, waveguide_type=TECH.WG.FWG.C.WIRE, transform=fp.rotate(degrees=30 ) fp.plot(device)   ![Horizontalized](images/horizontalized.png)"
},
{
"ref":"gpdk.routing.horizontalized.horizontalized.Horizontalized.device",
"url":207,
"doc":""
},
{
"ref":"gpdk.routing.horizontalized.horizontalized.Horizontalized.bend_factory",
"url":207,
"doc":""
},
{
"ref":"gpdk.routing.horizontalized.horizontalized.Horizontalized.straight_type",
"url":207,
"doc":""
},
{
"ref":"gpdk.routing.horizontalized.horizontalized.Horizontalized.straight_length",
"url":207,
"doc":""
},
{
"ref":"gpdk.routing.horizontalized.horizontalized.Horizontalized.build",
"url":207,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.routing.horizontalized.test",
"url":208,
"doc":""
},
{
"ref":"gpdk.routing.horizontalized.test.test_horizontalized",
"url":209,
"doc":""
},
{
"ref":"gpdk.routing.horizontalized.test.test_horizontalized.test_horizontalized",
"url":209,
"doc":"",
"func":1
},
{
"ref":"gpdk.run_examples",
"url":210,
"doc":""
},
{
"ref":"gpdk.run_examples.test_examples",
"url":210,
"doc":"",
"func":1
},
{
"ref":"gpdk.svrf_template",
"url":211,
"doc":""
},
{
"ref":"gpdk.technology",
"url":212,
"doc":""
},
{
"ref":"gpdk.technology.auto_link",
"url":213,
"doc":""
},
{
"ref":"gpdk.technology.auto_link.LinkPrefer",
"url":213,
"doc":""
},
{
"ref":"gpdk.technology.auto_link.BendUsing",
"url":213,
"doc":""
},
{
"ref":"gpdk.technology.auto_link.LINKING_POLICY",
"url":213,
"doc":""
},
{
"ref":"gpdk.technology.auto_link.LINKING_POLICY.LESS_TRANS",
"url":213,
"doc":""
},
{
"ref":"gpdk.technology.auto_link.LINKING_POLICY.MAX_SWG",
"url":213,
"doc":""
},
{
"ref":"gpdk.technology.auto_link.LINKING_POLICY.DEFAULT",
"url":213,
"doc":""
},
{
"ref":"gpdk.technology.auto_transition",
"url":214,
"doc":""
},
{
"ref":"gpdk.technology.auto_transition.AUTO_TRANSITION",
"url":214,
"doc":""
},
{
"ref":"gpdk.technology.auto_transition.AUTO_TRANSITION.DEFAULT",
"url":214,
"doc":""
},
{
"ref":"gpdk.technology.auto_vias",
"url":215,
"doc":""
},
{
"ref":"gpdk.technology.auto_vias.vias1",
"url":215,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.auto_vias.vias2",
"url":215,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.auto_vias.vias12",
"url":215,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.auto_vias.taper",
"url":215,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.auto_vias.AUTO_VIAS",
"url":215,
"doc":""
},
{
"ref":"gpdk.technology.auto_vias.AUTO_VIAS.DEFAULT",
"url":215,
"doc":""
},
{
"ref":"gpdk.technology.bands",
"url":216,
"doc":""
},
{
"ref":"gpdk.technology.bands.BAND",
"url":216,
"doc":"Base class of Band as band's container."
},
{
"ref":"gpdk.technology.bands.BAND.O",
"url":216,
"doc":""
},
{
"ref":"gpdk.technology.bands.BAND.E",
"url":216,
"doc":""
},
{
"ref":"gpdk.technology.bands.BAND.S",
"url":216,
"doc":""
},
{
"ref":"gpdk.technology.bands.BAND.C",
"url":216,
"doc":""
},
{
"ref":"gpdk.technology.bands.BAND.L",
"url":216,
"doc":""
},
{
"ref":"gpdk.technology.bands.BAND.U",
"url":216,
"doc":""
},
{
"ref":"gpdk.technology.device",
"url":217,
"doc":""
},
{
"ref":"gpdk.technology.device.DEVICE",
"url":217,
"doc":""
},
{
"ref":"gpdk.technology.device.DEVICE.BAND_LAYER",
"url":217,
"doc":""
},
{
"ref":"gpdk.technology.device.DEVICE.band_annotation",
"url":217,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.display",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor",
"url":218,
"doc":"An enumeration."
},
{
"ref":"gpdk.technology.display.NamedColor.BLACK",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.NAVY",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MEDIUMBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.BLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKGREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.GREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.TEAL",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKCYAN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DEEPSKYBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKTURQUOISE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MEDIUMSPRINGGREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.SPRINGGREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.CYAN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MIDNIGHTBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DODGERBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LIGHTSEAGREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.FORESTGREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.SEAGREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKSLATEGRAY",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LIMEGREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MEDIUMSEAGREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.TURQUOISE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.ROYALBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.STEELBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKSLATEBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MEDIUMTURQUOISE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.INDIGO",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKOLIVEGREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.CADETBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.CORNFLOWERBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.REBECCAPURPLE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MEDIUMAQUAMARINE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DIMGRAY",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.SLATEBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.OLIVEDRAB",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.SLATEGRAY",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LIGHTSLATEGRAY",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MEDIUMSLATEBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LAWNGREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.CHARTREUSE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.AQUAMARINE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MAROON",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.PURPLE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.OLIVE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.GRAY",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.SKYBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LIGHTSKYBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.BLUEVIOLET",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKRED",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKMAGENTA",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.SADDLEBROWN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKSEAGREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LIGHTGREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MEDIUMPURPLE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKVIOLET",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.PALEGREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKORCHID",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.YELLOWGREEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.SIENNA",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.BROWN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKGRAY",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LIGHTBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.GREENYELLOW",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.PALETURQUOISE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LIGHTSTEELBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.POWDERBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.FIREBRICK",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKGOLDENROD",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MEDIUMORCHID",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.ROSYBROWN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKKHAKI",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.SILVER",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MEDIUMVIOLETRED",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.INDIANRED",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.PERU",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.CHOCOLATE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.TAN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LIGHTGRAY",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.THISTLE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.ORCHID",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.GOLDENROD",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.PALEVIOLETRED",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.CRIMSON",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.GAINSBORO",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.PLUM",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.BURLYWOOD",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LIGHTCYAN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LAVENDER",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKSALMON",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.VIOLET",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.PALEGOLDENROD",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LIGHTCORAL",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.KHAKI",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.ALICEBLUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.HONEYDEW",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.AZURE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.SANDYBROWN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.WHEAT",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.BEIGE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.WHITESMOKE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MINTCREAM",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.GHOSTWHITE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.SALMON",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.ANTIQUEWHITE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LINEN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LIGHTGOLDENRODYELLOW",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.OLDLACE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.RED",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.FUCHSIA",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MAGENTA",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DEEPPINK",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.ORANGERED",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.TOMATO",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.HOTPINK",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.CORAL",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.DARKORANGE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LIGHTSALMON",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.ORANGE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LIGHTPINK",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.PINK",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.GOLD",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.PEACHPUFF",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.NAVAJOWHITE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MOCCASIN",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.BISQUE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.MISTYROSE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.BLANCHEDALMOND",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.PAPAYAWHIP",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LAVENDERBLUSH",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.SEASHELL",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.CORNSILK",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LEMONCHIFFON",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.FLORALWHITE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.SNOW",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.YELLOW",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.LIGHTYELLOW",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.IVORY",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.NamedColor.WHITE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.DISPLAY",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.display.DISPLAY.LAYER_STYLE",
"url":218,
"doc":""
},
{
"ref":"gpdk.technology.drc",
"url":219,
"doc":""
},
{
"ref":"gpdk.technology.fitting_function",
"url":220,
"doc":""
},
{
"ref":"gpdk.technology.fitting_function.FITTING_FUNCTION",
"url":220,
"doc":""
},
{
"ref":"gpdk.technology.fitting_function.FITTING_FUNCTION.Stubbed",
"url":220,
"doc":""
},
{
"ref":"gpdk.technology.fitting_function.FITTING_FUNCTION.SmoothCircular",
"url":220,
"doc":""
},
{
"ref":"gpdk.technology.font",
"url":221,
"doc":""
},
{
"ref":"gpdk.technology.font.font_bombardier",
"url":222,
"doc":""
},
{
"ref":"gpdk.technology.font.font_bombardier.FontType",
"url":222,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_bombardier.FontType.name",
"url":222,
"doc":""
},
{
"ref":"gpdk.technology.font.font_bombardier.FontType.units_per_em",
"url":222,
"doc":""
},
{
"ref":"gpdk.technology.font.font_bombardier.FontType.ascender",
"url":222,
"doc":""
},
{
"ref":"gpdk.technology.font.font_bombardier.FontType.descender",
"url":222,
"doc":""
},
{
"ref":"gpdk.technology.font.font_bombardier.FontType.glyphs",
"url":222,
"doc":""
},
{
"ref":"gpdk.technology.font.font_college_tm",
"url":223,
"doc":""
},
{
"ref":"gpdk.technology.font.font_college_tm.FontType",
"url":223,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_college_tm.FontType.name",
"url":223,
"doc":""
},
{
"ref":"gpdk.technology.font.font_college_tm.FontType.units_per_em",
"url":223,
"doc":""
},
{
"ref":"gpdk.technology.font.font_college_tm.FontType.ascender",
"url":223,
"doc":""
},
{
"ref":"gpdk.technology.font.font_college_tm.FontType.descender",
"url":223,
"doc":""
},
{
"ref":"gpdk.technology.font.font_college_tm.FontType.glyphs",
"url":223,
"doc":""
},
{
"ref":"gpdk.technology.font.font_fff_forward",
"url":224,
"doc":""
},
{
"ref":"gpdk.technology.font.font_fff_forward.FontType",
"url":224,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_fff_forward.FontType.name",
"url":224,
"doc":""
},
{
"ref":"gpdk.technology.font.font_fff_forward.FontType.units_per_em",
"url":224,
"doc":""
},
{
"ref":"gpdk.technology.font.font_fff_forward.FontType.ascender",
"url":224,
"doc":""
},
{
"ref":"gpdk.technology.font.font_fff_forward.FontType.descender",
"url":224,
"doc":""
},
{
"ref":"gpdk.technology.font.font_fff_forward.FontType.glyphs",
"url":224,
"doc":""
},
{
"ref":"gpdk.technology.font.font_fragile_bombers",
"url":225,
"doc":""
},
{
"ref":"gpdk.technology.font.font_fragile_bombers.FontType",
"url":225,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_fragile_bombers.FontType.name",
"url":225,
"doc":""
},
{
"ref":"gpdk.technology.font.font_fragile_bombers.FontType.units_per_em",
"url":225,
"doc":""
},
{
"ref":"gpdk.technology.font.font_fragile_bombers.FontType.ascender",
"url":225,
"doc":""
},
{
"ref":"gpdk.technology.font.font_fragile_bombers.FontType.descender",
"url":225,
"doc":""
},
{
"ref":"gpdk.technology.font.font_fragile_bombers.FontType.glyphs",
"url":225,
"doc":""
},
{
"ref":"gpdk.technology.font.font_graduate",
"url":226,
"doc":""
},
{
"ref":"gpdk.technology.font.font_graduate.FontType",
"url":226,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_graduate.FontType.name",
"url":226,
"doc":""
},
{
"ref":"gpdk.technology.font.font_graduate.FontType.units_per_em",
"url":226,
"doc":""
},
{
"ref":"gpdk.technology.font.font_graduate.FontType.ascender",
"url":226,
"doc":""
},
{
"ref":"gpdk.technology.font.font_graduate.FontType.descender",
"url":226,
"doc":""
},
{
"ref":"gpdk.technology.font.font_graduate.FontType.glyphs",
"url":226,
"doc":""
},
{
"ref":"gpdk.technology.font.font_karisma",
"url":227,
"doc":""
},
{
"ref":"gpdk.technology.font.font_karisma.FontType",
"url":227,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_karisma.FontType.name",
"url":227,
"doc":""
},
{
"ref":"gpdk.technology.font.font_karisma.FontType.units_per_em",
"url":227,
"doc":""
},
{
"ref":"gpdk.technology.font.font_karisma.FontType.ascender",
"url":227,
"doc":""
},
{
"ref":"gpdk.technology.font.font_karisma.FontType.descender",
"url":227,
"doc":""
},
{
"ref":"gpdk.technology.font.font_karisma.FontType.glyphs",
"url":227,
"doc":""
},
{
"ref":"gpdk.technology.font.font_karnivore",
"url":228,
"doc":""
},
{
"ref":"gpdk.technology.font.font_karnivore.FontType",
"url":228,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_karnivore.FontType.name",
"url":228,
"doc":""
},
{
"ref":"gpdk.technology.font.font_karnivore.FontType.units_per_em",
"url":228,
"doc":""
},
{
"ref":"gpdk.technology.font.font_karnivore.FontType.ascender",
"url":228,
"doc":""
},
{
"ref":"gpdk.technology.font.font_karnivore.FontType.descender",
"url":228,
"doc":""
},
{
"ref":"gpdk.technology.font.font_karnivore.FontType.glyphs",
"url":228,
"doc":""
},
{
"ref":"gpdk.technology.font.font_keania_one",
"url":229,
"doc":""
},
{
"ref":"gpdk.technology.font.font_keania_one.FontType",
"url":229,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_keania_one.FontType.name",
"url":229,
"doc":""
},
{
"ref":"gpdk.technology.font.font_keania_one.FontType.units_per_em",
"url":229,
"doc":""
},
{
"ref":"gpdk.technology.font.font_keania_one.FontType.ascender",
"url":229,
"doc":""
},
{
"ref":"gpdk.technology.font.font_keania_one.FontType.descender",
"url":229,
"doc":""
},
{
"ref":"gpdk.technology.font.font_keania_one.FontType.glyphs",
"url":229,
"doc":""
},
{
"ref":"gpdk.technology.font.font_line_pixel_7",
"url":230,
"doc":""
},
{
"ref":"gpdk.technology.font.font_line_pixel_7.FontType",
"url":230,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_line_pixel_7.FontType.name",
"url":230,
"doc":""
},
{
"ref":"gpdk.technology.font.font_line_pixel_7.FontType.units_per_em",
"url":230,
"doc":""
},
{
"ref":"gpdk.technology.font.font_line_pixel_7.FontType.ascender",
"url":230,
"doc":""
},
{
"ref":"gpdk.technology.font.font_line_pixel_7.FontType.descender",
"url":230,
"doc":""
},
{
"ref":"gpdk.technology.font.font_line_pixel_7.FontType.glyphs",
"url":230,
"doc":""
},
{
"ref":"gpdk.technology.font.font_minercraftory",
"url":231,
"doc":""
},
{
"ref":"gpdk.technology.font.font_minercraftory.FontType",
"url":231,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_minercraftory.FontType.name",
"url":231,
"doc":""
},
{
"ref":"gpdk.technology.font.font_minercraftory.FontType.units_per_em",
"url":231,
"doc":""
},
{
"ref":"gpdk.technology.font.font_minercraftory.FontType.ascender",
"url":231,
"doc":""
},
{
"ref":"gpdk.technology.font.font_minercraftory.FontType.descender",
"url":231,
"doc":""
},
{
"ref":"gpdk.technology.font.font_minercraftory.FontType.glyphs",
"url":231,
"doc":""
},
{
"ref":"gpdk.technology.font.font_pop_warner",
"url":232,
"doc":""
},
{
"ref":"gpdk.technology.font.font_pop_warner.FontType",
"url":232,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_pop_warner.FontType.name",
"url":232,
"doc":""
},
{
"ref":"gpdk.technology.font.font_pop_warner.FontType.units_per_em",
"url":232,
"doc":""
},
{
"ref":"gpdk.technology.font.font_pop_warner.FontType.ascender",
"url":232,
"doc":""
},
{
"ref":"gpdk.technology.font.font_pop_warner.FontType.descender",
"url":232,
"doc":""
},
{
"ref":"gpdk.technology.font.font_pop_warner.FontType.glyphs",
"url":232,
"doc":""
},
{
"ref":"gpdk.technology.font.font_press_start_2p",
"url":233,
"doc":""
},
{
"ref":"gpdk.technology.font.font_press_start_2p.FontType",
"url":233,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_press_start_2p.FontType.name",
"url":233,
"doc":""
},
{
"ref":"gpdk.technology.font.font_press_start_2p.FontType.units_per_em",
"url":233,
"doc":""
},
{
"ref":"gpdk.technology.font.font_press_start_2p.FontType.ascender",
"url":233,
"doc":""
},
{
"ref":"gpdk.technology.font.font_press_start_2p.FontType.descender",
"url":233,
"doc":""
},
{
"ref":"gpdk.technology.font.font_press_start_2p.FontType.glyphs",
"url":233,
"doc":""
},
{
"ref":"gpdk.technology.font.font_staubach",
"url":234,
"doc":""
},
{
"ref":"gpdk.technology.font.font_staubach.FontType",
"url":234,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_staubach.FontType.name",
"url":234,
"doc":""
},
{
"ref":"gpdk.technology.font.font_staubach.FontType.units_per_em",
"url":234,
"doc":""
},
{
"ref":"gpdk.technology.font.font_staubach.FontType.ascender",
"url":234,
"doc":""
},
{
"ref":"gpdk.technology.font.font_staubach.FontType.descender",
"url":234,
"doc":""
},
{
"ref":"gpdk.technology.font.font_staubach.FontType.glyphs",
"url":234,
"doc":""
},
{
"ref":"gpdk.technology.font.font_std_vented",
"url":235,
"doc":""
},
{
"ref":"gpdk.technology.font.font_std_vented.FontType",
"url":235,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_std_vented.FontType.name",
"url":235,
"doc":""
},
{
"ref":"gpdk.technology.font.font_std_vented.FontType.file",
"url":235,
"doc":""
},
{
"ref":"gpdk.technology.font.font_std_vented.FontType.units_per_em",
"url":235,
"doc":""
},
{
"ref":"gpdk.technology.font.font_std_vented.FontType.ascender",
"url":235,
"doc":""
},
{
"ref":"gpdk.technology.font.font_std_vented.FontType.descender",
"url":235,
"doc":""
},
{
"ref":"gpdk.technology.font.font_std_vented.FontType.glyphs",
"url":235,
"doc":""
},
{
"ref":"gpdk.technology.font.font_traceroute",
"url":236,
"doc":""
},
{
"ref":"gpdk.technology.font.font_traceroute.FontType",
"url":236,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_traceroute.FontType.name",
"url":236,
"doc":""
},
{
"ref":"gpdk.technology.font.font_traceroute.FontType.units_per_em",
"url":236,
"doc":""
},
{
"ref":"gpdk.technology.font.font_traceroute.FontType.ascender",
"url":236,
"doc":""
},
{
"ref":"gpdk.technology.font.font_traceroute.FontType.descender",
"url":236,
"doc":""
},
{
"ref":"gpdk.technology.font.font_traceroute.FontType.glyphs",
"url":236,
"doc":""
},
{
"ref":"gpdk.technology.font.font_your_complex_brk",
"url":237,
"doc":""
},
{
"ref":"gpdk.technology.font.font_your_complex_brk.FontType",
"url":237,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_your_complex_brk.FontType.name",
"url":237,
"doc":""
},
{
"ref":"gpdk.technology.font.font_your_complex_brk.FontType.units_per_em",
"url":237,
"doc":""
},
{
"ref":"gpdk.technology.font.font_your_complex_brk.FontType.ascender",
"url":237,
"doc":""
},
{
"ref":"gpdk.technology.font.font_your_complex_brk.FontType.descender",
"url":237,
"doc":""
},
{
"ref":"gpdk.technology.font.font_your_complex_brk.FontType.glyphs",
"url":237,
"doc":""
},
{
"ref":"gpdk.technology.font.font_zcool_qingke_huangyou",
"url":238,
"doc":""
},
{
"ref":"gpdk.technology.font.font_zcool_qingke_huangyou.FontType",
"url":238,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"gpdk.technology.font.font_zcool_qingke_huangyou.FontType.name",
"url":238,
"doc":""
},
{
"ref":"gpdk.technology.font.font_zcool_qingke_huangyou.FontType.units_per_em",
"url":238,
"doc":""
},
{
"ref":"gpdk.technology.font.font_zcool_qingke_huangyou.FontType.ascender",
"url":238,
"doc":""
},
{
"ref":"gpdk.technology.font.font_zcool_qingke_huangyou.FontType.descender",
"url":238,
"doc":""
},
{
"ref":"gpdk.technology.font.font_zcool_qingke_huangyou.FontType.glyphs",
"url":238,
"doc":""
},
{
"ref":"gpdk.technology.gdsii",
"url":239,
"doc":""
},
{
"ref":"gpdk.technology.gdsii.GDSII",
"url":239,
"doc":""
},
{
"ref":"gpdk.technology.gdsii.GDSII.MAX_COORDINATES",
"url":239,
"doc":""
},
{
"ref":"gpdk.technology.interfaces",
"url":240,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal",
"url":241,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal.SlotMetalLineType",
"url":241,
"doc":"Metal line with slot."
},
{
"ref":"gpdk.technology.interfaces.metal.SlotMetalLineType.line_width",
"url":241,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal.SlotMetalLineType.port_names",
"url":241,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal.SlotMetalLineType.max_width",
"url":241,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal.SlotMetalLineType.slot_width",
"url":241,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal.SlotMetalLineType.slot_length",
"url":241,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal.SlotMetalLineType.min_slot_length",
"url":241,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal.SlotMetalLineType.slot_gap",
"url":241,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal.SlotMetalLineType.stagger_offset",
"url":241,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal.SlotMetalLineType.port_width",
"url":241,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.interfaces.metal.CrackedMetalLineType",
"url":241,
"doc":"Metal line with slot."
},
{
"ref":"gpdk.technology.interfaces.metal.CrackedMetalLineType.line_width",
"url":241,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal.CrackedMetalLineType.port_names",
"url":241,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal.CrackedMetalLineType.max_width",
"url":241,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal.CrackedMetalLineType.spacing",
"url":241,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal.CrackedMetalLineType.profile",
"url":241,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.metal.CrackedMetalLineType.port_width",
"url":241,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.interfaces.wg",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType",
"url":242,
"doc":"Base class of waveguide type."
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType.core_layout_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType.cladding_layout_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType.core_design_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType.cladding_design_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType.port_names",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType.core_layer",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType.cladding_layer",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType.core_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType.cladding_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType.core_bias",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType.cladding_bias",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType.port_width",
"url":242,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType.profile",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.CoreCladdingWaveguideType.updated",
"url":242,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType",
"url":242,
"doc":"SlotWaveguideType( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.core_layout_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.slot_layout_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.cladding_layout_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.core_design_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.slot_design_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.cladding_design_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.port_names",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.core_layer",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.cladding_layer",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.core_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.slot_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.cladding_width",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.core_bias",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.slot_bias",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.cladding_bias",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.port_width",
"url":242,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.profile",
"url":242,
"doc":"Return the waveguide profile format: profile = [layer_defs, layer_defs .] where layer_defs = (layer, [(offset, [width]), (offset, [width]),  .]) if there's more than one width(to fix on-grid errors), please put them in ascend order"
},
{
"ref":"gpdk.technology.interfaces.wg.SlotWaveguideType.updated",
"url":242,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.interfaces.wg.SwgWaveguideType",
"url":242,
"doc":"SwgWaveguideType( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.technology.interfaces.wg.SwgWaveguideType.period",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SwgWaveguideType.duty_cycle",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.interfaces.wg.SwgWaveguideType.port_names",
"url":242,
"doc":""
},
{
"ref":"gpdk.technology.label",
"url":243,
"doc":""
},
{
"ref":"gpdk.technology.label.LABEL",
"url":243,
"doc":""
},
{
"ref":"gpdk.technology.label.LABEL.FONT",
"url":243,
"doc":""
},
{
"ref":"gpdk.technology.label.LABEL.FONT_SIZE",
"url":243,
"doc":""
},
{
"ref":"gpdk.technology.label.LABEL.BASELINE",
"url":243,
"doc":""
},
{
"ref":"gpdk.technology.layers",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS",
"url":244,
"doc":"Base class of PROCESS that contains all kinds of processes."
},
{
"ref":"gpdk.technology.layers.PROCESS.FWG",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.SWG",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.MWG",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.NP",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.PP",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.N",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.P",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.N2",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.P2",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.NPP",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.PPP",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.GE",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.SIL",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.TIN",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.CONT",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.M1",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.VIA1",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.M2",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.VIA2",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.MT",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.PASS",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.TH_ISO",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.DT",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.LABEL",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.TEXT",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.IOPORT",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.PINREC",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.FIBREC",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.FIBTGT",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.DEVREC",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.M1KO",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.MTKO",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.SIKO",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.PAYLOAD",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.FLYLINE",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PROCESS.ERROR",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE",
"url":244,
"doc":"Base class of PURPOSE that contains all kinds of purposes."
},
{
"ref":"gpdk.technology.layers.PURPOSE.COR",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.CLD",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.TRE",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.HOL",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.DMY",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.EC",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.GC",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.MT",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.OREC",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.EREC",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.NOTE",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.FWG",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.SWG",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.MWG",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.MARK",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.PURPOSE.TEXT",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER",
"url":244,
"doc":"Base class of LAYER that contains all kinds of layers."
},
{
"ref":"gpdk.technology.layers.LAYER.FWG_COR",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.FWG_CLD",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.FWG_TRE",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.FWG_HOL",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.SWG_COR",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.SWG_CLD",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.SWG_TRE",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.SWG_HOL",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.MWG_COR",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.MWG_CLD",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.MWG_TRE",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.MWG_HOL",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.NP_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.PP_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.N_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.P_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.N2_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.P2_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.NPP_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.PPP_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.GE_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.SIL_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.TIN_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.CONT_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.M1_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.VIA1_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.M2_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.VIA2_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.MT_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.PASS_EC",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.PASS_GC",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.PASS_MT",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.TH_ISO_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.DT_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.LABEL_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.TEXT_NOTE",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.IOPORT_OREC",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.IOPORT_EREC",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.PINREC_NOTE",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.PINREC_FWG",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.PINREC_SWG",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.PINREC_MWG",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.PINREC_TEXT",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.FIBREC_NOTE",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.FIBTGT_NOTE",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.DEVREC_NOTE",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.PAYLOAD_NOTE",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.M1KO_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.MTKO_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.SIKO_DRW",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.FLYLINE_MARK",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.layers.LAYER.ERROR_MARK",
"url":244,
"doc":""
},
{
"ref":"gpdk.technology.linker",
"url":245,
"doc":""
},
{
"ref":"gpdk.technology.linker.LINKER",
"url":245,
"doc":""
},
{
"ref":"gpdk.technology.linker.LINKER.SWG_WIRE_FWG_EULER",
"url":245,
"doc":""
},
{
"ref":"gpdk.technology.linker.LINKER.SWG_EXPANDED_MWG_EULER",
"url":245,
"doc":""
},
{
"ref":"gpdk.technology.link_between",
"url":246,
"doc":""
},
{
"ref":"gpdk.technology.metal",
"url":247,
"doc":""
},
{
"ref":"gpdk.technology.metal.METAL",
"url":247,
"doc":""
},
{
"ref":"gpdk.technology.metal.METAL.metal_stack",
"url":247,
"doc":""
},
{
"ref":"gpdk.technology.metal.METAL.from_single_layer",
"url":247,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.metal.METAL.M1",
"url":247,
"doc":""
},
{
"ref":"gpdk.technology.metal.METAL.M2",
"url":247,
"doc":""
},
{
"ref":"gpdk.technology.metal.METAL.MT",
"url":247,
"doc":""
},
{
"ref":"gpdk.technology.metal.METAL.PASS_MT",
"url":247,
"doc":""
},
{
"ref":"gpdk.technology.metrics",
"url":248,
"doc":""
},
{
"ref":"gpdk.technology.metrics.METRICS",
"url":248,
"doc":""
},
{
"ref":"gpdk.technology.metrics.METRICS.GRID",
"url":248,
"doc":""
},
{
"ref":"gpdk.technology.metrics.METRICS.UNIT",
"url":248,
"doc":""
},
{
"ref":"gpdk.technology.metrics.METRICS.ANGLE_STEP",
"url":248,
"doc":""
},
{
"ref":"gpdk.technology.tech",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.GDSII",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.METRICS",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.PIN",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.PORT",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.LABEL",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.PROCESS",
"url":249,
"doc":"Base class of PROCESS that contains all kinds of processes."
},
{
"ref":"gpdk.technology.tech.TECH.PURPOSE",
"url":249,
"doc":"Base class of PURPOSE that contains all kinds of purposes."
},
{
"ref":"gpdk.technology.tech.TECH.LAYER",
"url":249,
"doc":"Base class of LAYER that contains all kinds of layers."
},
{
"ref":"gpdk.technology.tech.TECH.DEVICE",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.BAND",
"url":249,
"doc":"Base class of Band as band's container."
},
{
"ref":"gpdk.technology.tech.TECH.WG",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.METAL",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.VIAS",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.DISPLAY",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.AUTO_TRANSITION",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.AUTO_VIAS",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.LINKING_POLICY",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.FITTING_FUNCTION",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.LINKER",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.tech.TECH.LINK_BETWEEN",
"url":249,
"doc":""
},
{
"ref":"gpdk.technology.terminal",
"url":250,
"doc":""
},
{
"ref":"gpdk.technology.terminal.PIN",
"url":250,
"doc":""
},
{
"ref":"gpdk.technology.terminal.PIN.LENGTH",
"url":250,
"doc":""
},
{
"ref":"gpdk.technology.terminal.PIN.OFFSET",
"url":250,
"doc":""
},
{
"ref":"gpdk.technology.terminal.PIN.ICON_LAYER",
"url":250,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.terminal.PIN.TEXT_LAYER",
"url":250,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.terminal.PORT",
"url":250,
"doc":""
},
{
"ref":"gpdk.technology.terminal.PORT.LENGTH",
"url":250,
"doc":""
},
{
"ref":"gpdk.technology.terminal.PORT.OFFSET",
"url":250,
"doc":""
},
{
"ref":"gpdk.technology.terminal.PORT.ICON_LAYER",
"url":250,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.terminal.PORT.TEXT_LAYER",
"url":250,
"doc":"",
"func":1
},
{
"ref":"gpdk.technology.vias",
"url":251,
"doc":""
},
{
"ref":"gpdk.technology.vias.VIAS",
"url":251,
"doc":""
},
{
"ref":"gpdk.technology.vias.VIAS.TOP_SHAPE",
"url":251,
"doc":""
},
{
"ref":"gpdk.technology.vias.VIAS.VIA_SHAPE",
"url":251,
"doc":""
},
{
"ref":"gpdk.technology.vias.VIAS.BOTTOM_SHAPE",
"url":251,
"doc":""
},
{
"ref":"gpdk.technology.vias.VIAS.SPACING",
"url":251,
"doc":""
},
{
"ref":"gpdk.technology.vias.VIAS.OVERLAP",
"url":251,
"doc":""
},
{
"ref":"gpdk.technology.waveguide_factory",
"url":252,
"doc":""
},
{
"ref":"gpdk.technology.waveguide_factory.StraightFactory",
"url":252,
"doc":"StraightFactory( args,  kwds)"
},
{
"ref":"gpdk.technology.waveguide_factory.CircularBendFactory",
"url":252,
"doc":"CircularBendFactory( args,  kwds)"
},
{
"ref":"gpdk.technology.waveguide_factory.CircularBendFactory.radius_eff",
"url":252,
"doc":""
},
{
"ref":"gpdk.technology.waveguide_factory.CircularBendFactory.waveguide_type",
"url":252,
"doc":""
},
{
"ref":"gpdk.technology.waveguide_factory.EulerBendFactory",
"url":252,
"doc":"EulerBendFactory( args,  kwds)"
},
{
"ref":"gpdk.technology.waveguide_factory.EulerBendFactory.radius_min",
"url":252,
"doc":""
},
{
"ref":"gpdk.technology.waveguide_factory.EulerBendFactory.l_max",
"url":252,
"doc":""
},
{
"ref":"gpdk.technology.waveguide_factory.EulerBendFactory.waveguide_type",
"url":252,
"doc":""
},
{
"ref":"gpdk.technology.wg",
"url":253,
"doc":""
},
{
"ref":"gpdk.technology.wg.WG",
"url":253,
"doc":""
},
{
"ref":"gpdk.technology.wg.WG.FWG",
"url":253,
"doc":""
},
{
"ref":"gpdk.technology.wg.WG.MWG",
"url":253,
"doc":""
},
{
"ref":"gpdk.technology.wg.WG.SWG",
"url":253,
"doc":""
},
{
"ref":"gpdk.technology.wg.WG.SLOT",
"url":253,
"doc":""
},
{
"ref":"gpdk.technology.wg.WG.SWGR",
"url":253,
"doc":""
},
{
"ref":"gpdk.test_all",
"url":254,
"doc":""
},
{
"ref":"gpdk.test_all.run_tests",
"url":254,
"doc":"",
"func":1
},
{
"ref":"gpdk.util",
"url":255,
"doc":""
},
{
"ref":"gpdk.util.all",
"url":256,
"doc":""
},
{
"ref":"gpdk.util.check_requirements",
"url":257,
"doc":""
},
{
"ref":"gpdk.util.check_requirements.Strict",
"url":257,
"doc":"Strict(version: str)"
},
{
"ref":"gpdk.util.check_requirements.Strict.version",
"url":257,
"doc":""
},
{
"ref":"gpdk.util.check_requirements.check_requirements",
"url":257,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.combine_builds",
"url":258,
"doc":""
},
{
"ref":"gpdk.util.combine_builds.combine_builds",
"url":258,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.curvature_util",
"url":259,
"doc":""
},
{
"ref":"gpdk.util.curvature_util.plot_curvature",
"url":259,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.gds_cell",
"url":260,
"doc":""
},
{
"ref":"gpdk.util.gds_cell.GdsCell",
"url":260,
"doc":"GdsCell( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.util.gds_cell.GdsCell.gds_folder",
"url":260,
"doc":""
},
{
"ref":"gpdk.util.gds_cell.GdsCell.gds_name",
"url":260,
"doc":""
},
{
"ref":"gpdk.util.gds_cell.GdsCell.gds_path",
"url":260,
"doc":""
},
{
"ref":"gpdk.util.gds_cell.GdsCell.cell_name",
"url":260,
"doc":""
},
{
"ref":"gpdk.util.gds_cell.GdsCell.ignore_layers",
"url":260,
"doc":""
},
{
"ref":"gpdk.util.gds_cell.GdsCell.layer_mapper",
"url":260,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.gds_cell.GdsCell.cell_ports",
"url":260,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.gds_cell.GdsCell.build",
"url":260,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.util.json_cell",
"url":42,
"doc":""
},
{
"ref":"gpdk.util.json_cell.JsonCell",
"url":42,
"doc":"JsonCell( args: Any,  kwargs: Any)"
},
{
"ref":"gpdk.util.json_cell.JsonCell.json_folder",
"url":42,
"doc":""
},
{
"ref":"gpdk.util.json_cell.JsonCell.json_name",
"url":42,
"doc":""
},
{
"ref":"gpdk.util.json_cell.JsonCell.json_path",
"url":42,
"doc":""
},
{
"ref":"gpdk.util.json_cell.JsonCell.library_folder",
"url":42,
"doc":""
},
{
"ref":"gpdk.util.json_cell.JsonCell.library_path",
"url":42,
"doc":""
},
{
"ref":"gpdk.util.json_cell.JsonCell.default_layers",
"url":42,
"doc":""
},
{
"ref":"gpdk.util.json_cell.JsonCell.build",
"url":42,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"gpdk.util.link_util",
"url":261,
"doc":""
},
{
"ref":"gpdk.util.link_util.transition_start",
"url":261,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.link_util.transition_end",
"url":261,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.link_util.straight",
"url":261,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.link_util.bend",
"url":261,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec",
"url":262,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.check_all",
"url":263,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.check_all.check_pdk",
"url":263,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.check_list",
"url":264,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.components",
"url":265,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.components.component_all_check",
"url":266,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.components.component_all_check.ComponentAllCheckRule",
"url":266,
"doc":"ComponentAllCheckRule(_font: openpyxl.styles.fonts.Font =  Parameters: name=None, charset=None, family=None, b=False, i=False, strike=None, outline=None, shadow=None, condense=None, color=None, extend=None, sz=12.0, u=None, vertAlign=None, scheme=None, _style: str = '\\x1b[32m', _title: str =  , total: int = 0, index: int = 0)"
},
{
"ref":"gpdk.util.pdk_spec.components.component_all_check.ComponentAllCheckRule.total",
"url":266,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.components.component_all_check.ComponentAllCheckRule.index",
"url":266,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.components.component_all_check.ComponentAllCheckRule.checked",
"url":266,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.components.component_func_all_check",
"url":267,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.components.component_func_all_check.ComponentFuncAllCheckRule",
"url":267,
"doc":"ComponentFuncAllCheckRule(_font: openpyxl.styles.fonts.Font =  Parameters: name=None, charset=None, family=None, b=False, i=False, strike=None, outline=None, shadow=None, condense=None, color=None, extend=None, sz=12.0, u=None, vertAlign=None, scheme=None, _style: str = '\\x1b[32m', _title: str =  , total: int = 0, index: int = 0)"
},
{
"ref":"gpdk.util.pdk_spec.components.component_func_all_check.ComponentFuncAllCheckRule.total",
"url":267,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.components.component_func_all_check.ComponentFuncAllCheckRule.index",
"url":267,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.components.component_func_all_check.ComponentFuncAllCheckRule.checked",
"url":267,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.components.file_exist_check",
"url":268,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.components.file_exist_check.FileExistCheckRule",
"url":268,
"doc":"FileExistCheckRule(_font: openpyxl.styles.fonts.Font =  Parameters: name=None, charset=None, family=None, b=False, i=False, strike=None, outline=None, shadow=None, condense=None, color=None, extend=None, sz=12.0, u=None, vertAlign=None, scheme=None, _style: str = '\\x1b[32m', _title: str =  , total: int = 0, index: int = 0)"
},
{
"ref":"gpdk.util.pdk_spec.components.file_exist_check.FileExistCheckRule.total",
"url":268,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.components.file_exist_check.FileExistCheckRule.index",
"url":268,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.components.file_exist_check.FileExistCheckRule.checked",
"url":268,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.interfaces",
"url":269,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.interfaces.ICheckRule",
"url":269,
"doc":"Super class of all element. An IRunnable runs processors to process itself."
},
{
"ref":"gpdk.util.pdk_spec.interfaces.ICheckRule.checked",
"url":269,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.interfaces.IRuleLib",
"url":269,
"doc":"Super class of containers. An IRunnableContainer runs processors to process itself and its content."
},
{
"ref":"gpdk.util.pdk_spec.interfaces.IRuleLib.content",
"url":269,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.interfaces.IRuleLib.check",
"url":269,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.rule",
"url":270,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.rule.Progressable",
"url":270,
"doc":"Progressable(_font: openpyxl.styles.fonts.Font =  Parameters: name=None, charset=None, family=None, b=False, i=False, strike=None, outline=None, shadow=None, condense=None, color=None, extend=None, sz=12.0, u=None, vertAlign=None, scheme=None, _style: str = '\\x1b[32m', _title: str =  , total: int = 0, index: int = 0)"
},
{
"ref":"gpdk.util.pdk_spec.rule.Progressable.total",
"url":270,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.rule.Progressable.index",
"url":270,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.rule.Progressable.style",
"url":270,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.rule.Progressable.title",
"url":270,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.rule.Progressable.with_total",
"url":270,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.rule.Progressable.with_index",
"url":270,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.rule.Progressable.progress",
"url":270,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.rule.CheckRule",
"url":270,
"doc":"CheckRule(_font: openpyxl.styles.fonts.Font =  Parameters: name=None, charset=None, family=None, b=False, i=False, strike=None, outline=None, shadow=None, condense=None, color=None, extend=None, sz=12.0, u=None, vertAlign=None, scheme=None, _style: str = '\\x1b[32m', _title: str =  , total: int = 0, index: int = 0)"
},
{
"ref":"gpdk.util.pdk_spec.rule.CheckRule.total",
"url":270,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.rule.CheckRule.index",
"url":270,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.rule.CheckRule.checked",
"url":270,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.rule.RuleLib",
"url":270,
"doc":"RuleLib( args,  kwds)"
},
{
"ref":"gpdk.util.pdk_spec.rule.RuleLib.content",
"url":270,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.rule.RuleLib.check",
"url":270,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.rule.RuleChecker",
"url":270,
"doc":"An IProcessor processes hierarchical targets in a deep first manner We use processors to plot, export_gds  ."
},
{
"ref":"gpdk.util.pdk_spec.rule.RuleChecker.enter",
"url":270,
"doc":"Called before processing a target. Return True to continue processing child content. False to stop here and run exit for the target",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.rule.RuleChecker.exit",
"url":270,
"doc":"Called after processing a target.",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.settings",
"url":271,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology",
"url":272,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_link",
"url":273,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_link.AutoLinkCheckRule",
"url":273,
"doc":"AutoLinkCheckRule(_font: openpyxl.styles.fonts.Font =  Parameters: name=None, charset=None, family=None, b=False, i=False, strike=None, outline=None, shadow=None, condense=None, color=None, extend=None, sz=12.0, u=None, vertAlign=None, scheme=None, _style: str = '\\x1b[32m', _title: str =  , total: int = 0, index: int = 0)"
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_link.AutoLinkCheckRule.total",
"url":273,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_link.AutoLinkCheckRule.index",
"url":273,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_link.AutoLinkCheckRule.checked",
"url":273,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_transition",
"url":274,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_transition.AutoTransitionCheckRule",
"url":274,
"doc":"AutoTransitionCheckRule(_font: openpyxl.styles.fonts.Font =  Parameters: name=None, charset=None, family=None, b=False, i=False, strike=None, outline=None, shadow=None, condense=None, color=None, extend=None, sz=12.0, u=None, vertAlign=None, scheme=None, _style: str = '\\x1b[32m', _title: str =  , total: int = 0, index: int = 0)"
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_transition.AutoTransitionCheckRule.total",
"url":274,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_transition.AutoTransitionCheckRule.index",
"url":274,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_transition.AutoTransitionCheckRule.checked",
"url":274,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_vias",
"url":275,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_vias.AutoViasCheckRule",
"url":275,
"doc":"AutoViasCheckRule(_font: openpyxl.styles.fonts.Font =  Parameters: name=None, charset=None, family=None, b=False, i=False, strike=None, outline=None, shadow=None, condense=None, color=None, extend=None, sz=12.0, u=None, vertAlign=None, scheme=None, _style: str = '\\x1b[32m', _title: str =  , total: int = 0, index: int = 0)"
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_vias.AutoViasCheckRule.total",
"url":275,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_vias.AutoViasCheckRule.index",
"url":275,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.auto_vias.AutoViasCheckRule.checked",
"url":275,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.technology.bands",
"url":276,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.bands.BandsCheckRule",
"url":276,
"doc":"BandsCheckRule(_font: openpyxl.styles.fonts.Font =  Parameters: name=None, charset=None, family=None, b=False, i=False, strike=None, outline=None, shadow=None, condense=None, color=None, extend=None, sz=12.0, u=None, vertAlign=None, scheme=None, _style: str = '\\x1b[32m', _title: str =  , total: int = 0, index: int = 0)"
},
{
"ref":"gpdk.util.pdk_spec.technology.bands.BandsCheckRule.total",
"url":276,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.bands.BandsCheckRule.index",
"url":276,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.bands.BandsCheckRule.checked",
"url":276,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.technology.display",
"url":277,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.display.DisplayCheckRule",
"url":277,
"doc":"DisplayCheckRule(_font: openpyxl.styles.fonts.Font =  Parameters: name=None, charset=None, family=None, b=False, i=False, strike=None, outline=None, shadow=None, condense=None, color=None, extend=None, sz=12.0, u=None, vertAlign=None, scheme=None, _style: str = '\\x1b[32m', _title: str =  , total: int = 0, index: int = 0)"
},
{
"ref":"gpdk.util.pdk_spec.technology.display.DisplayCheckRule.total",
"url":277,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.display.DisplayCheckRule.index",
"url":277,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.display.DisplayCheckRule.checked",
"url":277,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.technology.layers",
"url":278,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.layers.LayersCheckRule",
"url":278,
"doc":"LayersCheckRule(_font: openpyxl.styles.fonts.Font =  Parameters: name=None, charset=None, family=None, b=False, i=False, strike=None, outline=None, shadow=None, condense=None, color=None, extend=None, sz=12.0, u=None, vertAlign=None, scheme=None, _style: str = '\\x1b[32m', _title: str =  , total: int = 0, index: int = 0)"
},
{
"ref":"gpdk.util.pdk_spec.technology.layers.LayersCheckRule.total",
"url":278,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.layers.LayersCheckRule.index",
"url":278,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.layers.LayersCheckRule.checked",
"url":278,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.technology.linker",
"url":279,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.linker.LinkerCheckRule",
"url":279,
"doc":"LinkerCheckRule(_font: openpyxl.styles.fonts.Font =  Parameters: name=None, charset=None, family=None, b=False, i=False, strike=None, outline=None, shadow=None, condense=None, color=None, extend=None, sz=12.0, u=None, vertAlign=None, scheme=None, _style: str = '\\x1b[32m', _title: str =  , total: int = 0, index: int = 0)"
},
{
"ref":"gpdk.util.pdk_spec.technology.linker.LinkerCheckRule.total",
"url":279,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.linker.LinkerCheckRule.index",
"url":279,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.linker.LinkerCheckRule.checked",
"url":279,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.technology.tech",
"url":280,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.tech.TechCheckRule",
"url":280,
"doc":"TechCheckRule(_font: openpyxl.styles.fonts.Font =  Parameters: name=None, charset=None, family=None, b=False, i=False, strike=None, outline=None, shadow=None, condense=None, color=None, extend=None, sz=12.0, u=None, vertAlign=None, scheme=None, _style: str = '\\x1b[32m', _title: str =  , total: int = 0, index: int = 0)"
},
{
"ref":"gpdk.util.pdk_spec.technology.tech.TechCheckRule.total",
"url":280,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.tech.TechCheckRule.index",
"url":280,
"doc":""
},
{
"ref":"gpdk.util.pdk_spec.technology.tech.TechCheckRule.checked",
"url":280,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.pdk_spec.technology.tech.TechCheckRule.load_tech",
"url":280,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.port_util",
"url":281,
"doc":""
},
{
"ref":"gpdk.util.port_util.get_left_ports",
"url":281,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.port_util.get_right_ports",
"url":281,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.spc_util",
"url":282,
"doc":""
},
{
"ref":"gpdk.util.spc_util.compare_spice",
"url":282,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.spc_util.compare_spice_with_args",
"url":282,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.test_util",
"url":283,
"doc":""
},
{
"ref":"gpdk.util.test_util.expect_same_content",
"url":283,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.transformable_point",
"url":284,
"doc":""
},
{
"ref":"gpdk.util.transformable_point.TPoint2D",
"url":284,
"doc":"Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object."
},
{
"ref":"gpdk.util.transformable_point.TPoint2D.translated",
"url":284,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.transformable_point.TPoint2D.rotated",
"url":284,
"doc":"",
"func":1
},
{
"ref":"gpdk.util.transformable_point.TPoint2D.h_mirrored",
"url":284,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"gpdk.util.transformable_point.TPoint2D.v_mirrored",
"url":284,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"gpdk.util.transformable_point.TPoint2D.c_mirrored",
"url":284,
"doc":"Center mirrored.",
"func":1
}
]